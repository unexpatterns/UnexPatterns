Timer unit: 1e-09 s

Total time: 127.106 s
File: /Users/simondelarue/Documents/PhD/Research/Co-Meg/CoMEG/algorithm.py
Function: unex_patterns at line 62

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    62                                           def unex_patterns(adjacency, context, context_csc, extents, intents, r=0, y=0, min_support=0, max_support=np.inf, beta=0, 
    63                                                       delta=0, degs=[], unexs_g=[], unexs_a=[], unexs=[], names_col=[], comp_gen_graph=None, shuf=False) -> List:
    64                                               """InClose algorithm using Unexpectedness + IsCannonical function. 
    65                                               
    66                                               Parameters
    67                                               ----------
    68                                               adjacency: sparse.csr_matrix
    69                                                   Adjacency matrix of the graph
    70                                               context: sparse.csr_matrix
    71                                                   Features matrix of the graph. Contains nodes x attributes.
    72                                               context_csc: sparse.csc_matrix
    73                                                   Features matrix of the graph in CSC format.
    74                                               extents: list
    75                                                   List of extents, i.e sets of nodes.
    76                                               intents: list
    77                                                   List of intents, i.e sets of attributes.
    78                                               r: int (default=0)
    79                                                   Index of the pattern being filled.
    80                                               y: int (default=0)
    81                                                   Index of candidate attribute.
    82                                               min_support: int (default=0)
    83                                                   Minimum support value for extent.
    84                                               max_support: int (default +inf)
    85                                                   Maximum support value for extent.
    86                                               beta: int (default=0)
    87                                                   Minimum support value for intent.
    88                                               delta: int (default=0)
    89                                                   Minimum value for Unexpectedness difference between patterns.
    90                                               degs, unexs_g, unexs_a, unexs, names_col: list
    91                                                   Lists for value storage over recursion.
    92                                               comp_gen_graph: dict (default=None)
    93                                                   Dictionnary with number of nodes as keys and list of graph generation complexities as values.
    94                                                   
    95                                               Returns
    96                                               -------
    97                                                   List of tuples where each tuple is an unexpected pattern made of (extent, intent). 
    98                                               """
    99                                               global r_new
   100                                               global ptr
   101       894     357000.0    399.3      0.0      r_new = r_new + 1
   102                                               
   103       894     603000.0    674.5      0.0      print(f'NEW ITERATION \n --------')
   104       894     737000.0    824.4      0.0      print(f'r: {r} - r_new: {r_new}')
   105                                               # ------------------------------------------------
   106       894   32967000.0  36875.8      0.0      print(f'|extents[r]|: {len(extents[r])} - intents[r]: {names_col[intents[r]]}')
   107                                               
   108    645173  199755000.0    309.6      0.2      for j in np.arange(context.shape[1])[y:]:
   109    645173  765568000.0   1186.6      0.6          print(f"new attribute: {j} - {names_col[j]}")
   110    645173   87001000.0    134.8      0.1          try:
   111    644279  102362000.0    158.9      0.1              extents[r_new] = []
   112    644279  107386000.0    166.7      0.1              unexs_g[r_new] = 0
   113    644279  103739000.0    161.0      0.1              unexs_a[r_new] = 0
   114       894     275000.0    307.6      0.0          except IndexError:
   115       894     285000.0    318.8      0.0              extents.append([])
   116       894     224000.0    250.6      0.0              unexs_g.append(0)
   117       894     246000.0    275.2      0.0              unexs_a.append(0)
   118                                           
   119                                                   # Form a new extent by adding extension of attribute j to current pattern extent
   120    645173 31606973000.0  48989.9     24.9          ext_j = set(extension([j], context_csc))
   121                                                   #ext_j = set(extension([j], context))
   122    645173 1613623000.0   2501.1      1.3          extents[r_new] = list(sorted(set(extents[r]).intersection(ext_j)))
   123    645173  137046000.0    212.4      0.1          len_new_extent = len(extents[r_new])
   124                                                   
   125    632924   87355000.0    138.0      0.1          if (len_new_extent >= min_support) and (len_new_extent <= max_support):
   126                                           
   127                                                       # Verify that length of intention of new extent is greater than a threshold (e.g beta)
   128                                                       # In other words, we only enter the loop if the new extent still has "space" to welcome enough new attributes
   129                                                       # Using this, we can trim all patterns with not enough attributes from the recursion tree
   130     12249 3339089000.0 272600.9      2.6              size_intention = len(intention(extents[r_new], context))
   131      7071    1229000.0    173.8      0.0              if size_intention >= beta: 
   132                                                               
   133      5178   10626000.0   2052.1      0.0                  new_intent = list(sorted(set(intents[r]).union(set([j]))))
   134                                                           
   135                                                           # Compute Unexpectedness on pattern (i.e on graph and attributes)
   136                                                           # ------------------------------------------------------------------------------------------------------------
   137      5178   18889000.0   3647.9      0.0                  print(f'  Extent size {len(extents[r_new])} - intent {new_intent}')
   138      5178    1037000.0    200.3      0.0                  size = len(new_intent)
   139      5178 2151051000.0 415421.2      1.7                  unex_g = graph_unexpectedness(adjacency[extents[r_new], :][:, extents[r_new]], comp_gen_graph)
   140      5178    1522000.0    293.9      0.0                  unexs_g[r_new] = unex_g
   141                                                           # Attributes unexpectedness
   142      5178   54381000.0  10502.3      0.0                  unex_a = attr_unexpectedness(context, new_intent, degs)
   143      5178    1073000.0    207.2      0.0                  unexs_a[r_new] = unex_a
   144                                                           # Total unexpectedness
   145      5178     995000.0    192.2      0.0                  unex = unex_g + unex_a
   146                                                           #unexs[r_new] = unex
   147      5178    9382000.0   1811.9      0.0                  print(f'  U(G): {unex_g}')
   148      5178    5064000.0    978.0      0.0                  print(f'  U(A): {unex_a}')
   149      5178    4916000.0    949.4      0.0                  print(f'  U: {unex}')
   150      5178   18744000.0   3619.9      0.0                  print(f'unexs: {unexs} r_new: {r_new} - r: {r} - ptr: {ptr}')
   151                                                           # ------------------------------------------------------------------------------------------------------------
   152                                                           
   153                                                           #if set(extents[r_new]) == set(extents[r]):
   154      3102    1244000.0    401.0      0.0                  if len_new_extent - len(extents[r]) == 0:
   155      3102   11109000.0   3581.2      0.0                      print(f' == comparing unex={unex} and unexs[{ptr}]={unexs[ptr]}')
   156                                                               
   157                                                               #if True:
   158      2489     967000.0    388.5      0.0                      if unex - unexs[ptr] >= delta:
   159                                                               
   160      2489    3298000.0   1325.0      0.0                          print(f'  Extent size did not change -> attribute {names_col[j]} is added to intent.')
   161      2489     744000.0    298.9      0.0                          intents[r] = new_intent
   162      2489     733000.0    294.5      0.0                          unexs[-1] = unex
   163                                                               else:
   164       613     870000.0   1419.2      0.0                          print(f'STOP rec, unexpectedness difference is {unex - unexs[ptr]}')
   165       613     847000.0   1381.7      0.0                          print(f'Attribute {names_col[j]} ({j}) does not add any unexpectedness to pattern')
   166                                                                   #extents[r_new].pop(-1) -> no need to change the extent since we are in the block where it did not move by adding attribute
   167                                                                   #intents[r_new].pop(-1) -> at this stage, we only use new-intent, so no need to remove anything from intents parameter
   168                                                                   #raise Exception('end')
   169       613   21668000.0  35347.5      0.0                          break
   170                                                               
   171                                                           else:
   172      2076 78741778000.0 37929565.5     61.9                      is_canno = is_cannonical(context, extents, intents, r, j - 1)
   173      1104     263000.0    238.2      0.0                      if is_canno:
   174       972   13431000.0  13817.9      0.0                          print(f'extents {extents[r]} intents {intents[r]} r {r} rnew {r_new}')
   175       972    1499000.0   1542.2      0.0                          print(f'  Extent size DID change. IsCannonical: {is_canno}')
   176       972     258000.0    265.4      0.0                          try:
   177       894     834000.0    932.9      0.0                              intents[r_new] = []
   178       894     426000.0    476.5      0.0                          except IndexError:
   179       894     585000.0    654.4      0.0                              intents.append([])
   180                                           
   181                                                                   #intents[r_new] = new_intent 
   182                                                                   #len_new_intent = len(intents[r_new])
   183                                           
   184       972     676000.0    695.5      0.0                          print(f'r:{r} rnew:{r_new}')
   185       972    4056000.0   4172.8      0.0                          print(f' ISCANNO comparing unex={unex} and unexs[{ptr}]=={unexs[ptr]}')
   186                                                                   
   187                                                                   #if True:
   188       893     628000.0    703.2      0.0                          if unex - unexs[ptr] >= delta or r == 0:
   189                                                                       
   190       893     267000.0    299.0      0.0                              intents[r_new] = new_intent 
   191       893     339000.0    379.6      0.0                              len_new_intent = len(intents[r_new])
   192                                           
   193       893     289000.0    323.6      0.0                              unexs.append(unex)
   194       893     396000.0    443.4      0.0                              ptr += 1
   195       893   46797000.0  52404.3      0.0                              print(f'  --> Enter recursion with Intent: {names_col[intents[r_new]]}...')
   196                                           
   197                                                                       # New: if recursion depth is above a threshold, reorder attributes (randomly) to break the redundancy in patterns
   198       893    4117000.0   4610.3      0.0                              p = smoothing(len(unexs))
   199       893  397680000.0 445330.3      0.3                              X = stats.bernoulli(p)
   200                                           
   201                                                                       #if False:
   202       831   47476000.0  57131.2      0.0                              if not shuf and X.rvs(1)[0] == 1:
   203        62     232000.0   3741.9      0.0                                  print(f'Entering smoothing, val={smoothing(len(unexs))}')
   204        62      25000.0    403.2      0.0                                  start = j+1
   205        62      22000.0    354.8      0.0                                  end = len(names_col)
   206        62    1539000.0  24822.6      0.0                                  rand_idxs = np.random.choice(np.arange(start, end), size=(end - start), replace=False)
   207        62      19000.0    306.5      0.0                                  if len(rand_idxs) > 0:
   208        62 6415841000.0 103481306.5      5.0                                      context = shuffle_columns(context, rand_idxs)
   209        62   82305000.0 1327500.0      0.1                                      context_csc = context.tocsc()
   210        62    4912000.0  79225.8      0.0                                      new_names_col = shuffle_columns(names_col, rand_idxs)
   211        62     261000.0   4209.7      0.0                                      print(start, end)
   212        62   17607000.0 283983.9      0.0                                      print(len(rand_idxs), rand_idxs, j)
   213        62    3562000.0  57451.6      0.0                                      print(new_names_col[j-1:j+5], names_col[j-1:j+5])
   214        62     783000.0  12629.0      0.0                                      degs = shuffle_columns(degs, rand_idxs)
   215        62     210000.0   3387.1      0.0                                      print(f"Next attr will be: {new_names_col[j+1]} instead of {names_col[j+1]}")
   216        62    2827000.0  45596.8      0.0                                      print(f'degs: {degs[j-2:j+10]}')
   217        62      15000.0    241.9      0.0                                      names_col = new_names_col
   218        62      11000.0    177.4      0.0                                      shuf = True
   219       773     180000.0    232.9      0.0                              elif shuf:
   220        58      37000.0    637.9      0.0                                  print(f'no smoothing, Reorder attributes according to degrees')
   221        58  587612000.0 10131241.4      0.5                                  sort_index = np.argsort(get_degrees(context.astype(bool), transpose=True))
   222        58     408000.0   7034.5      0.0                                  new_degs = degs[sort_index]
   223        58   70134000.0 1209206.9      0.1                                  new_context = context[:, sort_index]
   224        58    4197000.0  72362.1      0.0                                  new_names_col = names_col[sort_index]
   225        58   82160000.0 1416551.7      0.1                                  context_csc = new_context.tocsc()
   226        58     164000.0   2827.6      0.0                                  degs = new_degs.copy()
   227        58   30236000.0 521310.3      0.0                                  context = new_context.copy()
   228        58    5783000.0  99706.9      0.0                                  names_col = new_names_col.copy()
   229        58    5079000.0  87569.0      0.0                                  print(f'degs: {degs[j-2:j+5]}')
   230        58      11000.0    189.7      0.0                                  shuf = False
   231                                           
   232       893     856000.0    958.6      0.0                              unex_patterns(adjacency, context, context_csc, extents, intents, r=r_new, y=j+1, min_support=min_support, 
   233       893     271000.0    303.5      0.0                                          max_support=max_support, beta=beta, delta=delta, degs=degs, unexs_g=unexs_g, 
   234       893     198000.0    221.7      0.0                                          unexs_a=unexs_a, unexs=unexs, names_col=names_col, comp_gen_graph=comp_gen_graph, shuf=shuf)
   235                                                                   else:
   236        79      43000.0    544.3      0.0                              print(f'IsCANNO but no U improvement')
   237        79    2018000.0  25544.3      0.0                              break
   238                                                               
   239                                                               else:
   240      1104    1056000.0    956.5      0.0                          print(f'IsCannonical: False --> do not enter recursion.')
   241                                                               
   242                                               #print(f'inexs: {unexs}')        
   243       894     889000.0    994.4      0.0      print(f'r:{r} - r_new:{r_new}')
   244       894     563000.0    629.8      0.0      unexs.pop(-1)
   245       894     341000.0    381.4      0.0      ptr -= 1
   246       894     161000.0    180.1      0.0      shuf = False
   247                                               #print(f'inexs after pop: {unexs}')        
   248       894     341000.0    381.4      0.0      print(f'**END FUNCTION')
   249                                               
   250       894   15168000.0  16966.4      0.0      return [*zip(extents, intents)]

