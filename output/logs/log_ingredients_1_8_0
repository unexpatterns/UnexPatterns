Timer unit: 1e-09 s

Total time: 0.259545 s
File: /Users/simondelarue/Documents/PhD/Research/Co-Meg/CoMEG/algorithm.py
Function: unex_patterns at line 62

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    62                                           def unex_patterns(adjacency, context, context_csc, extents, intents, r=0, y=0, min_support=0, max_support=np.inf, beta=0, 
    63                                                       delta=0, degs=[], unexs_g=[], unexs_a=[], unexs=[], names_col=[], comp_gen_graph=None, shuf=False) -> List:
    64                                               """InClose algorithm using Unexpectedness + IsCannonical function. 
    65                                               
    66                                               Parameters
    67                                               ----------
    68                                               adjacency: sparse.csr_matrix
    69                                                   Adjacency matrix of the graph
    70                                               context: sparse.csr_matrix
    71                                                   Features matrix of the graph. Contains nodes x attributes.
    72                                               context_csc: sparse.csc_matrix
    73                                                   Features matrix of the graph in CSC format.
    74                                               extents: list
    75                                                   List of extents, i.e sets of nodes.
    76                                               intents: list
    77                                                   List of intents, i.e sets of attributes.
    78                                               r: int (default=0)
    79                                                   Index of the pattern being filled.
    80                                               y: int (default=0)
    81                                                   Index of candidate attribute.
    82                                               min_support: int (default=0)
    83                                                   Minimum support value for extent.
    84                                               max_support: int (default +inf)
    85                                                   Maximum support value for extent.
    86                                               beta: int (default=0)
    87                                                   Minimum support value for intent.
    88                                               delta: int (default=0)
    89                                                   Minimum value for Unexpectedness difference between patterns.
    90                                               degs, unexs_g, unexs_a, unexs, names_col: list
    91                                                   Lists for value storage over recursion.
    92                                               comp_gen_graph: dict (default=None)
    93                                                   Dictionnary with number of nodes as keys and list of graph generation complexities as values.
    94                                                   
    95                                               Returns
    96                                               -------
    97                                                   List of tuples where each tuple is an unexpected pattern made of (extent, intent). 
    98                                               """
    99                                               global r_new
   100                                               global ptr
   101        42      21000.0    500.0      0.0      r_new = r_new + 1
   102                                               
   103        42      26000.0    619.0      0.0      print(f'NEW ITERATION \n --------')
   104        42      40000.0    952.4      0.0      print(f'r: {r} - r_new: {r_new}')
   105                                               # ------------------------------------------------
   106        42    1171000.0  27881.0      0.5      print(f'|extents[r]|: {len(extents[r])} - intents[r]: {names_col[intents[r]]}')
   107                                               
   108        67      74000.0   1104.5      0.0      for j in np.arange(context.shape[1])[y:]:
   109        67     115000.0   1716.4      0.0          print(f"new attribute: {j} - {names_col[j]}")
   110        67      11000.0    164.2      0.0          try:
   111        41      18000.0    439.0      0.0              extents[r_new] = []
   112        26       6000.0    230.8      0.0              unexs_g[r_new] = 0
   113        26       5000.0    192.3      0.0              unexs_a[r_new] = 0
   114        41      11000.0    268.3      0.0          except IndexError:
   115        41      12000.0    292.7      0.0              extents.append([])
   116        41       8000.0    195.1      0.0              unexs_g.append(0)
   117        41      11000.0    268.3      0.0              unexs_a.append(0)
   118                                           
   119                                                   # Form a new extent by adding extension of attribute j to current pattern extent
   120        67    5162000.0  77044.8      2.0          ext_j = set(extension([j], context_csc))
   121                                                   #ext_j = set(extension([j], context))
   122        67    4503000.0  67209.0      1.7          extents[r_new] = list(sorted(set(extents[r]).intersection(ext_j)))
   123        67      24000.0    358.2      0.0          len_new_extent = len(extents[r_new])
   124                                                   
   125        67      23000.0    343.3      0.0          if (len_new_extent >= min_support) and (len_new_extent <= max_support):
   126                                           
   127                                                       # Verify that length of intention of new extent is greater than a threshold (e.g beta)
   128                                                       # In other words, we only enter the loop if the new extent still has "space" to welcome enough new attributes
   129                                                       # Using this, we can trim all patterns with not enough attributes from the recursion tree
   130        67   51886000.0 774417.9     20.0              size_intention = len(intention(extents[r_new], context))
   131        67      14000.0    209.0      0.0              if size_intention >= beta: 
   132                                                               
   133        67      88000.0   1313.4      0.0                  new_intent = list(sorted(set(intents[r]).union(set([j]))))
   134                                                           
   135                                                           # Compute Unexpectedness on pattern (i.e on graph and attributes)
   136                                                           # ------------------------------------------------------------------------------------------------------------
   137        67     125000.0   1865.7      0.0                  print(f'  Extent size {len(extents[r_new])} - intent {new_intent}')
   138        67      10000.0    149.3      0.0                  size = len(new_intent)
   139        67  111940000.0 1670746.3     43.1                  unex_g = graph_unexpectedness(adjacency[extents[r_new], :][:, extents[r_new]], comp_gen_graph)
   140        67      16000.0    238.8      0.0                  unexs_g[r_new] = unex_g
   141                                                           # Attributes unexpectedness
   142        67     460000.0   6865.7      0.2                  unex_a = attr_unexpectedness(context, new_intent, degs)
   143        67      12000.0    179.1      0.0                  unexs_a[r_new] = unex_a
   144                                                           # Total unexpectedness
   145        67      19000.0    283.6      0.0                  unex = unex_g + unex_a
   146                                                           #unexs[r_new] = unex
   147        67     116000.0   1731.3      0.0                  print(f'  U(G): {unex_g}')
   148        67      55000.0    820.9      0.0                  print(f'  U(A): {unex_a}')
   149        67      53000.0    791.0      0.0                  print(f'  U: {unex}')
   150        67     136000.0   2029.9      0.1                  print(f'unexs: {unexs} r_new: {r_new} - r: {r} - ptr: {ptr}')
   151                                                           # ------------------------------------------------------------------------------------------------------------
   152                                                           
   153                                                           #if set(extents[r_new]) == set(extents[r]):
   154        67      23000.0    343.3      0.0                  if len_new_extent - len(extents[r]) == 0:
   155                                                               print(f' == comparing unex={unex} and unexs[{ptr}]={unexs[ptr]}')
   156                                                               
   157                                                               #if True:
   158                                                               if unex - unexs[ptr] >= delta:
   159                                                               
   160                                                                   print(f'  Extent size did not change -> attribute {names_col[j]} is added to intent.')
   161                                                                   intents[r] = new_intent
   162                                                                   unexs[-1] = unex
   163                                                               else:
   164                                                                   print(f'STOP rec, unexpectedness difference is {unex - unexs[ptr]}')
   165                                                                   print(f'Attribute {names_col[j]} ({j}) does not add any unexpectedness to pattern')
   166                                                                   #extents[r_new].pop(-1) -> no need to change the extent since we are in the block where it did not move by adding attribute
   167                                                                   #intents[r_new].pop(-1) -> at this stage, we only use new-intent, so no need to remove anything from intents parameter
   168                                                                   #raise Exception('end')
   169                                                                   break
   170                                                               
   171                                                           else:
   172        67   52188000.0 778925.4     20.1                      is_canno = is_cannonical(context, extents, intents, r, j - 1)
   173        67       7000.0    104.5      0.0                      if is_canno:
   174        67    8223000.0 122731.3      3.2                          print(f'extents {extents[r]} intents {intents[r]} r {r} rnew {r_new}')
   175        67      50000.0    746.3      0.0                          print(f'  Extent size DID change. IsCannonical: {is_canno}')
   176        67       9000.0    134.3      0.0                          try:
   177        41      17000.0    414.6      0.0                              intents[r_new] = []
   178        41      11000.0    268.3      0.0                          except IndexError:
   179        41      15000.0    365.9      0.0                              intents.append([])
   180                                           
   181                                                                   #intents[r_new] = new_intent 
   182                                                                   #len_new_intent = len(intents[r_new])
   183                                           
   184        67      38000.0    567.2      0.0                          print(f'r:{r} rnew:{r_new}')
   185        67     115000.0   1716.4      0.0                          print(f' ISCANNO comparing unex={unex} and unexs[{ptr}]=={unexs[ptr]}')
   186                                                                   
   187                                                                   #if True:
   188        41      17000.0    414.6      0.0                          if unex - unexs[ptr] >= delta or r == 0:
   189                                                                       
   190        41       8000.0    195.1      0.0                              intents[r_new] = new_intent 
   191        41       7000.0    170.7      0.0                              len_new_intent = len(intents[r_new])
   192                                           
   193        41      14000.0    341.5      0.0                              unexs.append(unex)
   194        41      12000.0    292.7      0.0                              ptr += 1
   195        41    1148000.0  28000.0      0.4                              print(f'  --> Enter recursion with Intent: {names_col[intents[r_new]]}...')
   196                                           
   197                                                                       # New: if recursion depth is above a threshold, reorder attributes (randomly) to break the redundancy in patterns
   198        41      97000.0   2365.9      0.0                              p = smoothing(len(unexs))
   199        41   15775000.0 384756.1      6.1                              X = stats.bernoulli(p)
   200                                           
   201                                                                       #if False:
   202        39    3139000.0  80487.2      1.2                              if not shuf and X.rvs(1)[0] == 1:
   203         2       5000.0   2500.0      0.0                                  print(f'Entering smoothing, val={smoothing(len(unexs))}')
   204         2          0.0      0.0      0.0                                  start = j+1
   205         2          0.0      0.0      0.0                                  end = len(names_col)
   206         2    1160000.0 580000.0      0.4                                  rand_idxs = np.random.choice(np.arange(start, end), size=(end - start), replace=False)
   207         1          0.0      0.0      0.0                                  if len(rand_idxs) > 0:
   208         1     866000.0 866000.0      0.3                                      context = shuffle_columns(context, rand_idxs)
   209         1      71000.0  71000.0      0.0                                      context_csc = context.tocsc()
   210         1      14000.0  14000.0      0.0                                      new_names_col = shuffle_columns(names_col, rand_idxs)
   211         1       2000.0   2000.0      0.0                                      print(start, end)
   212         1      35000.0  35000.0      0.0                                      print(len(rand_idxs), rand_idxs, j)
   213         1      46000.0  46000.0      0.0                                      print(new_names_col[j-1:j+5], names_col[j-1:j+5])
   214         1       8000.0   8000.0      0.0                                      degs = shuffle_columns(degs, rand_idxs)
   215         1       2000.0   2000.0      0.0                                      print(f"Next attr will be: {new_names_col[j+1]} instead of {names_col[j+1]}")
   216         1      31000.0  31000.0      0.0                                      print(f'degs: {degs[j-2:j+10]}')
   217         1       1000.0   1000.0      0.0                                      names_col = new_names_col
   218         1          0.0      0.0      0.0                                      shuf = True
   219        39       4000.0    102.6      0.0                              elif shuf:
   220                                                                           print(f'no smoothing, Reorder attributes according to degrees')
   221                                                                           sort_index = np.argsort(get_degrees(context.astype(bool), transpose=True))
   222                                                                           new_degs = degs[sort_index]
   223                                                                           new_context = context[:, sort_index]
   224                                                                           new_names_col = names_col[sort_index]
   225                                                                           context_csc = new_context.tocsc()
   226                                                                           degs = new_degs.copy()
   227                                                                           context = new_context.copy()
   228                                                                           names_col = new_names_col.copy()
   229                                                                           print(f'degs: {degs[j-2:j+5]}')
   230                                                                           shuf = False
   231                                           
   232        41      62000.0   1512.2      0.0                              unex_patterns(adjacency, context, context_csc, extents, intents, r=r_new, y=j+1, min_support=min_support, 
   233        41       9000.0    219.5      0.0                                          max_support=max_support, beta=beta, delta=delta, degs=degs, unexs_g=unexs_g, 
   234        41      10000.0    243.9      0.0                                          unexs_a=unexs_a, unexs=unexs, names_col=names_col, comp_gen_graph=comp_gen_graph, shuf=shuf)
   235                                                                   else:
   236        26       9000.0    346.2      0.0                              print(f'IsCANNO but no U improvement')
   237        26      13000.0    500.0      0.0                              break
   238                                                               
   239                                                               else:
   240                                                                   print(f'IsCannonical: False --> do not enter recursion.')
   241                                                               
   242                                               #print(f'inexs: {unexs}')        
   243        42      22000.0    523.8      0.0      print(f'r:{r} - r_new:{r_new}')
   244        42      17000.0    404.8      0.0      unexs.pop(-1)
   245        42       6000.0    142.9      0.0      ptr -= 1
   246        42       7000.0    166.7      0.0      shuf = False
   247                                               #print(f'inexs after pop: {unexs}')        
   248        42      16000.0    381.0      0.0      print(f'**END FUNCTION')
   249                                               
   250        42      45000.0   1071.4      0.0      return [*zip(extents, intents)]

