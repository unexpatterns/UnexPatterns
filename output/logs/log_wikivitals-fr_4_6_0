Timer unit: 1e-09 s

Total time: 52.3191 s
File: /Users/simondelarue/Documents/PhD/Research/Co-Meg/CoMEG/algorithm.py
Function: unex_patterns at line 62

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    62                                           def unex_patterns(adjacency, context, context_csc, extents, intents, r=0, y=0, min_support=0, max_support=np.inf, beta=0, 
    63                                                       delta=0, degs=[], unexs_g=[], unexs_a=[], unexs=[], names_col=[], comp_gen_graph=None, shuf=False) -> List:
    64                                               """InClose algorithm using Unexpectedness + IsCannonical function. 
    65                                               
    66                                               Parameters
    67                                               ----------
    68                                               adjacency: sparse.csr_matrix
    69                                                   Adjacency matrix of the graph
    70                                               context: sparse.csr_matrix
    71                                                   Features matrix of the graph. Contains nodes x attributes.
    72                                               context_csc: sparse.csc_matrix
    73                                                   Features matrix of the graph in CSC format.
    74                                               extents: list
    75                                                   List of extents, i.e sets of nodes.
    76                                               intents: list
    77                                                   List of intents, i.e sets of attributes.
    78                                               r: int (default=0)
    79                                                   Index of the pattern being filled.
    80                                               y: int (default=0)
    81                                                   Index of candidate attribute.
    82                                               min_support: int (default=0)
    83                                                   Minimum support value for extent.
    84                                               max_support: int (default +inf)
    85                                                   Maximum support value for extent.
    86                                               beta: int (default=0)
    87                                                   Minimum support value for intent.
    88                                               delta: int (default=0)
    89                                                   Minimum value for Unexpectedness difference between patterns.
    90                                               degs, unexs_g, unexs_a, unexs, names_col: list
    91                                                   Lists for value storage over recursion.
    92                                               comp_gen_graph: dict (default=None)
    93                                                   Dictionnary with number of nodes as keys and list of graph generation complexities as values.
    94                                                   
    95                                               Returns
    96                                               -------
    97                                                   List of tuples where each tuple is an unexpected pattern made of (extent, intent). 
    98                                               """
    99                                               global r_new
   100                                               global ptr
   101       122      45000.0    368.9      0.0      r_new = r_new + 1
   102                                               
   103       122     107000.0    877.0      0.0      print(f'NEW ITERATION \n --------')
   104       122     101000.0    827.9      0.0      print(f'r: {r} - r_new: {r_new}')
   105                                               # ------------------------------------------------
   106       122    4365000.0  35778.7      0.0      print(f'|extents[r]|: {len(extents[r])} - intents[r]: {names_col[intents[r]]}')
   107                                               
   108    501184  139739000.0    278.8      0.3      for j in np.arange(context.shape[1])[y:]:
   109    501184  602673000.0   1202.5      1.2          print(f"new attribute: {j} - {names_col[j]}")
   110    501184   63395000.0    126.5      0.1          try:
   111    501062   72586000.0    144.9      0.1              extents[r_new] = []
   112    501062   74473000.0    148.6      0.1              unexs_g[r_new] = 0
   113    501062   73822000.0    147.3      0.1              unexs_a[r_new] = 0
   114       122      50000.0    409.8      0.0          except IndexError:
   115       122      42000.0    344.3      0.0              extents.append([])
   116       122      29000.0    237.7      0.0              unexs_g.append(0)
   117       122      38000.0    311.5      0.0              unexs_a.append(0)
   118                                           
   119                                                   # Form a new extent by adding extension of attribute j to current pattern extent
   120    501184 21871417000.0  43639.5     41.8          ext_j = set(extension([j], context_csc))
   121                                                   #ext_j = set(extension([j], context))
   122    501184 4074586000.0   8129.9      7.8          extents[r_new] = list(sorted(set(extents[r]).intersection(ext_j)))
   123    501184   92574000.0    184.7      0.2          len_new_extent = len(extents[r_new])
   124                                                   
   125    489197   65481000.0    133.9      0.1          if (len_new_extent >= min_support) and (len_new_extent <= max_support):
   126                                           
   127                                                       # Verify that length of intention of new extent is greater than a threshold (e.g beta)
   128                                                       # In other words, we only enter the loop if the new extent still has "space" to welcome enough new attributes
   129                                                       # Using this, we can trim all patterns with not enough attributes from the recursion tree
   130     11987 3352952000.0 279715.7      6.4              size_intention = len(intention(extents[r_new], context))
   131     11363    1798000.0    158.2      0.0              if size_intention >= beta: 
   132                                                               
   133       624    1214000.0   1945.5      0.0                  new_intent = list(sorted(set(intents[r]).union(set([j]))))
   134                                                           
   135                                                           # Compute Unexpectedness on pattern (i.e on graph and attributes)
   136                                                           # ------------------------------------------------------------------------------------------------------------
   137       624    2507000.0   4017.6      0.0                  print(f'  Extent size {len(extents[r_new])} - intent {new_intent}')
   138       624     138000.0    221.2      0.0                  size = len(new_intent)
   139       624  283701000.0 454649.0      0.5                  unex_g = graph_unexpectedness(adjacency[extents[r_new], :][:, extents[r_new]], comp_gen_graph)
   140       624     185000.0    296.5      0.0                  unexs_g[r_new] = unex_g
   141                                                           # Attributes unexpectedness
   142       624    6170000.0   9887.8      0.0                  unex_a = attr_unexpectedness(context, new_intent, degs)
   143       624     138000.0    221.2      0.0                  unexs_a[r_new] = unex_a
   144                                                           # Total unexpectedness
   145       624     128000.0    205.1      0.0                  unex = unex_g + unex_a
   146                                                           #unexs[r_new] = unex
   147       624    1382000.0   2214.7      0.0                  print(f'  U(G): {unex_g}')
   148       624     625000.0   1001.6      0.0                  print(f'  U(A): {unex_a}')
   149       624     564000.0    903.8      0.0                  print(f'  U: {unex}')
   150       624    1827000.0   2927.9      0.0                  print(f'unexs: {unexs} r_new: {r_new} - r: {r} - ptr: {ptr}')
   151                                                           # ------------------------------------------------------------------------------------------------------------
   152                                                           
   153                                                           #if set(extents[r_new]) == set(extents[r]):
   154       372     144000.0    387.1      0.0                  if len_new_extent - len(extents[r]) == 0:
   155       372     787000.0   2115.6      0.0                      print(f' == comparing unex={unex} and unexs[{ptr}]={unexs[ptr]}')
   156                                                               
   157                                                               #if True:
   158       368     146000.0    396.7      0.0                      if unex - unexs[ptr] >= delta:
   159                                                               
   160       368     496000.0   1347.8      0.0                          print(f'  Extent size did not change -> attribute {names_col[j]} is added to intent.')
   161       368     112000.0    304.3      0.0                          intents[r] = new_intent
   162       368     117000.0    317.9      0.0                          unexs[-1] = unex
   163                                                               else:
   164         4       6000.0   1500.0      0.0                          print(f'STOP rec, unexpectedness difference is {unex - unexs[ptr]}')
   165         4       5000.0   1250.0      0.0                          print(f'Attribute {names_col[j]} ({j}) does not add any unexpectedness to pattern')
   166                                                                   #extents[r_new].pop(-1) -> no need to change the extent since we are in the block where it did not move by adding attribute
   167                                                                   #intents[r_new].pop(-1) -> at this stage, we only use new-intent, so no need to remove anything from intents parameter
   168                                                                   #raise Exception('end')
   169         4       6000.0   1500.0      0.0                          break
   170                                                               
   171                                                           else:
   172       252 15259823000.0 60554853.2     29.2                      is_canno = is_cannonical(context, extents, intents, r, j - 1)
   173       128      24000.0    187.5      0.0                      if is_canno:
   174       124    3929000.0  31685.5      0.0                          print(f'extents {extents[r]} intents {intents[r]} r {r} rnew {r_new}')
   175       124     185000.0   1491.9      0.0                          print(f'  Extent size DID change. IsCannonical: {is_canno}')
   176       124      12000.0     96.8      0.0                          try:
   177       121     120000.0    991.7      0.0                              intents[r_new] = []
   178       121      66000.0    545.5      0.0                          except IndexError:
   179       121      68000.0    562.0      0.0                              intents.append([])
   180                                           
   181                                                                   #intents[r_new] = new_intent 
   182                                                                   #len_new_intent = len(intents[r_new])
   183                                           
   184       124      79000.0    637.1      0.0                          print(f'r:{r} rnew:{r_new}')
   185       124     450000.0   3629.0      0.0                          print(f' ISCANNO comparing unex={unex} and unexs[{ptr}]=={unexs[ptr]}')
   186                                                                   
   187                                                                   #if True:
   188       121      75000.0    619.8      0.0                          if unex - unexs[ptr] >= delta or r == 0:
   189                                                                       
   190       121      24000.0    198.3      0.0                              intents[r_new] = new_intent 
   191       121      37000.0    305.8      0.0                              len_new_intent = len(intents[r_new])
   192                                           
   193       121      27000.0    223.1      0.0                              unexs.append(unex)
   194       121      49000.0    405.0      0.0                              ptr += 1
   195       121    5785000.0  47809.9      0.0                              print(f'  --> Enter recursion with Intent: {names_col[intents[r_new]]}...')
   196                                           
   197                                                                       # New: if recursion depth is above a threshold, reorder attributes (randomly) to break the redundancy in patterns
   198       121     596000.0   4925.6      0.0                              p = smoothing(len(unexs))
   199       121   55653000.0 459942.1      0.1                              X = stats.bernoulli(p)
   200                                           
   201                                                                       #if False:
   202       116    7155000.0  61681.0      0.0                              if not shuf and X.rvs(1)[0] == 1:
   203         5      19000.0   3800.0      0.0                                  print(f'Entering smoothing, val={smoothing(len(unexs))}')
   204         5          0.0      0.0      0.0                                  start = j+1
   205         5       2000.0    400.0      0.0                                  end = len(names_col)
   206         5     317000.0  63400.0      0.0                                  rand_idxs = np.random.choice(np.arange(start, end), size=(end - start), replace=False)
   207         5       3000.0    600.0      0.0                                  if len(rand_idxs) > 0:
   208         5 6113998000.0 1222799600.0     11.7                                      context = shuffle_columns(context, rand_idxs)
   209         5   10088000.0 2017600.0      0.0                                      context_csc = context.tocsc()
   210         5     750000.0 150000.0      0.0                                      new_names_col = shuffle_columns(names_col, rand_idxs)
   211         5      27000.0   5400.0      0.0                                      print(start, end)
   212         5     790000.0 158000.0      0.0                                      print(len(rand_idxs), rand_idxs, j)
   213         5     299000.0  59800.0      0.0                                      print(new_names_col[j-1:j+5], names_col[j-1:j+5])
   214         5     105000.0  21000.0      0.0                                      degs = shuffle_columns(degs, rand_idxs)
   215         5      15000.0   3000.0      0.0                                      print(f"Next attr will be: {new_names_col[j+1]} instead of {names_col[j+1]}")
   216         5     229000.0  45800.0      0.0                                      print(f'degs: {degs[j-2:j+10]}')
   217         5       2000.0    400.0      0.0                                      names_col = new_names_col
   218         5          0.0      0.0      0.0                                      shuf = True
   219       111      32000.0    288.3      0.0                              elif shuf:
   220         5       4000.0    800.0      0.0                                  print(f'no smoothing, Reorder attributes according to degrees')
   221         5   41344000.0 8268800.0      0.1                                  sort_index = np.argsort(get_degrees(context.astype(bool), transpose=True))
   222         5      57000.0  11400.0      0.0                                  new_degs = degs[sort_index]
   223         5    9151000.0 1830200.0      0.0                                  new_context = context[:, sort_index]
   224         5     778000.0 155600.0      0.0                                  new_names_col = names_col[sort_index]
   225         5   10160000.0 2032000.0      0.0                                  context_csc = new_context.tocsc()
   226         5     560000.0 112000.0      0.0                                  degs = new_degs.copy()
   227         5    3537000.0 707400.0      0.0                                  context = new_context.copy()
   228         5     462000.0  92400.0      0.0                                  names_col = new_names_col.copy()
   229         5     379000.0  75800.0      0.0                                  print(f'degs: {degs[j-2:j+5]}')
   230         5       1000.0    200.0      0.0                                  shuf = False
   231                                           
   232       121      98000.0    809.9      0.0                              unex_patterns(adjacency, context, context_csc, extents, intents, r=r_new, y=j+1, min_support=min_support, 
   233       121      38000.0    314.0      0.0                                          max_support=max_support, beta=beta, delta=delta, degs=degs, unexs_g=unexs_g, 
   234       121      29000.0    239.7      0.0                                          unexs_a=unexs_a, unexs=unexs, names_col=names_col, comp_gen_graph=comp_gen_graph, shuf=shuf)
   235                                                                   else:
   236         3       5000.0   1666.7      0.0                              print(f'IsCANNO but no U improvement')
   237         3       6000.0   2000.0      0.0                              break
   238                                                               
   239                                                               else:
   240       128     156000.0   1218.8      0.0                          print(f'IsCannonical: False --> do not enter recursion.')
   241                                                               
   242                                               #print(f'inexs: {unexs}')        
   243       122     133000.0   1090.2      0.0      print(f'r:{r} - r_new:{r_new}')
   244       122      72000.0    590.2      0.0      unexs.pop(-1)
   245       122      51000.0    418.0      0.0      ptr -= 1
   246       122      20000.0    163.9      0.0      shuf = False
   247                                               #print(f'inexs after pop: {unexs}')        
   248       122      90000.0    737.7      0.0      print(f'**END FUNCTION')
   249                                               
   250       122     502000.0   4114.8      0.0      return [*zip(extents, intents)]

