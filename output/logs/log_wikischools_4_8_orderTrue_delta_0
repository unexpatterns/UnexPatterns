Timer unit: 1e-09 s

Total time: 74.206 s
File: /Users/simondelarue/Documents/PhD/Research/Co-Meg/CoMEG/algorithm.py
Function: unex_patterns at line 62

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    62                                           def unex_patterns(adjacency, context, context_csc, extents, intents, r=0, y=0, min_support=0, max_support=np.inf, beta=0, 
    63                                                       delta=0, degs=[], unexs_g=[], unexs_a=[], unexs=[], names_col=[], comp_gen_graph=None, shuf=False) -> List:
    64                                               """InClose algorithm using Unexpectedness + IsCannonical function. 
    65                                               
    66                                               Parameters
    67                                               ----------
    68                                               adjacency: sparse.csr_matrix
    69                                                   Adjacency matrix of the graph
    70                                               context: sparse.csr_matrix
    71                                                   Features matrix of the graph. Contains nodes x attributes.
    72                                               context_csc: sparse.csc_matrix
    73                                                   Features matrix of the graph in CSC format.
    74                                               extents: list
    75                                                   List of extents, i.e sets of nodes.
    76                                               intents: list
    77                                                   List of intents, i.e sets of attributes.
    78                                               r: int (default=0)
    79                                                   Index of the pattern being filled.
    80                                               y: int (default=0)
    81                                                   Index of candidate attribute.
    82                                               min_support: int (default=0)
    83                                                   Minimum support value for extent.
    84                                               max_support: int (default +inf)
    85                                                   Maximum support value for extent.
    86                                               beta: int (default=0)
    87                                                   Minimum support value for intent.
    88                                               delta: int (default=0)
    89                                                   Minimum value for Unexpectedness difference between patterns.
    90                                               degs, unexs_g, unexs_a, unexs, names_col: list
    91                                                   Lists for value storage over recursion.
    92                                               comp_gen_graph: dict (default=None)
    93                                                   Dictionnary with number of nodes as keys and list of graph generation complexities as values.
    94                                                   
    95                                               Returns
    96                                               -------
    97                                                   List of tuples where each tuple is an unexpected pattern made of (extent, intent). 
    98                                               """
    99                                               global r_new
   100                                               global ptr
   101       495     212000.0    428.3      0.0      r_new = r_new + 1
   102                                               
   103       495     332000.0    670.7      0.0      print(f'NEW ITERATION \n --------')
   104       495     375000.0    757.6      0.0      print(f'r: {r} - r_new: {r_new}')
   105                                               # ------------------------------------------------
   106       495   17120000.0  34585.9      0.0      print(f'|extents[r]|: {len(extents[r])} - intents[r]: {names_col[intents[r]]}')
   107                                               
   108    404400  115794000.0    286.3      0.2      for j in np.arange(context.shape[1])[y:]:
   109    404400  435480000.0   1076.9      0.6          print(f"new attribute: {j} - {names_col[j]}")
   110    404400   47138000.0    116.6      0.1          try:
   111    403905   59950000.0    148.4      0.1              extents[r_new] = []
   112    403905   62184000.0    154.0      0.1              unexs_g[r_new] = 0
   113    403905   61129000.0    151.3      0.1              unexs_a[r_new] = 0
   114       495     145000.0    292.9      0.0          except IndexError:
   115       495     174000.0    351.5      0.0              extents.append([])
   116       495     117000.0    236.4      0.0              unexs_g.append(0)
   117       495     142000.0    286.9      0.0              unexs_a.append(0)
   118                                           
   119                                                   # Form a new extent by adding extension of attribute j to current pattern extent
   120    404400 18774070000.0  46424.5     25.3          ext_j = set(extension([j], context_csc))
   121                                                   #ext_j = set(extension([j], context))
   122    404400 1293667000.0   3199.0      1.7          extents[r_new] = list(sorted(set(extents[r]).intersection(ext_j)))
   123    404400   77916000.0    192.7      0.1          len_new_extent = len(extents[r_new])
   124                                                   
   125    395014   50919000.0    128.9      0.1          if (len_new_extent >= min_support) and (len_new_extent <= max_support):
   126                                           
   127                                                       # Verify that length of intention of new extent is greater than a threshold (e.g beta)
   128                                                       # In other words, we only enter the loop if the new extent still has "space" to welcome enough new attributes
   129                                                       # Using this, we can trim all patterns with not enough attributes from the recursion tree
   130      9386 3118053000.0 332202.5      4.2              size_intention = len(intention(extents[r_new], context))
   131      6517    1141000.0    175.1      0.0              if size_intention >= beta: 
   132                                                               
   133      2869    5456000.0   1901.7      0.0                  new_intent = list(sorted(set(intents[r]).union(set([j]))))
   134                                                           
   135                                                           # Compute Unexpectedness on pattern (i.e on graph and attributes)
   136                                                           # ------------------------------------------------------------------------------------------------------------
   137      2869    9734000.0   3392.8      0.0                  print(f'  Extent size {len(extents[r_new])} - intent {new_intent}')
   138      2869     610000.0    212.6      0.0                  size = len(new_intent)
   139      2869 1168562000.0 407306.4      1.6                  unex_g = graph_unexpectedness(adjacency[extents[r_new], :][:, extents[r_new]], comp_gen_graph)
   140      2869     852000.0    297.0      0.0                  unexs_g[r_new] = unex_g
   141                                                           # Attributes unexpectedness
   142      2869   28042000.0   9774.1      0.0                  unex_a = attr_unexpectedness(context, new_intent, degs)
   143      2869     594000.0    207.0      0.0                  unexs_a[r_new] = unex_a
   144                                                           # Total unexpectedness
   145      2869     553000.0    192.8      0.0                  unex = unex_g + unex_a
   146                                                           #unexs[r_new] = unex
   147      2869    5250000.0   1829.9      0.0                  print(f'  U(G): {unex_g}')
   148      2869    2825000.0    984.7      0.0                  print(f'  U(A): {unex_a}')
   149      2869    2702000.0    941.8      0.0                  print(f'  U: {unex}')
   150      2869    9285000.0   3236.3      0.0                  print(f'unexs: {unexs} r_new: {r_new} - r: {r} - ptr: {ptr}')
   151                                                           # ------------------------------------------------------------------------------------------------------------
   152                                                           
   153                                                           #if set(extents[r_new]) == set(extents[r]):
   154      1634     653000.0    399.6      0.0                  if len_new_extent - len(extents[r]) == 0:
   155      1634    3352000.0   2051.4      0.0                      print(f' == comparing unex={unex} and unexs[{ptr}]={unexs[ptr]}')
   156                                                               
   157                                                               #if True:
   158      1336     525000.0    393.0      0.0                      if unex - unexs[ptr] >= delta:
   159                                                               
   160      1336    1573000.0   1177.4      0.0                          print(f'  Extent size did not change -> attribute {names_col[j]} is added to intent.')
   161      1336     392000.0    293.4      0.0                          intents[r] = new_intent
   162      1336     376000.0    281.4      0.0                          unexs[-1] = unex
   163                                                               else:
   164       298     356000.0   1194.6      0.0                          print(f'STOP rec, unexpectedness difference is {unex - unexs[ptr]}')
   165       298     409000.0   1372.5      0.0                          print(f'Attribute {names_col[j]} ({j}) does not add any unexpectedness to pattern')
   166                                                                   #extents[r_new].pop(-1) -> no need to change the extent since we are in the block where it did not move by adding attribute
   167                                                                   #intents[r_new].pop(-1) -> at this stage, we only use new-intent, so no need to remove anything from intents parameter
   168                                                                   #raise Exception('end')
   169       298    6719000.0  22547.0      0.0                          break
   170                                                               
   171                                                           else:
   172      1235 44161052000.0 35757936.8     59.5                      is_canno = is_cannonical(context, extents, intents, r, j - 1)
   173       640     140000.0    218.8      0.0                      if is_canno:
   174       595    7904000.0  13284.0      0.0                          print(f'extents {extents[r]} intents {intents[r]} r {r} rnew {r_new}')
   175       595     862000.0   1448.7      0.0                          print(f'  Extent size DID change. IsCannonical: {is_canno}')
   176       595      74000.0    124.4      0.0                          try:
   177       495     463000.0    935.4      0.0                              intents[r_new] = []
   178       495     194000.0    391.9      0.0                          except IndexError:
   179       495     291000.0    587.9      0.0                              intents.append([])
   180                                           
   181                                                                   #intents[r_new] = new_intent 
   182                                                                   #len_new_intent = len(intents[r_new])
   183                                           
   184       595     389000.0    653.8      0.0                          print(f'r:{r} rnew:{r_new}')
   185       595    2441000.0   4102.5      0.0                          print(f' ISCANNO comparing unex={unex} and unexs[{ptr}]=={unexs[ptr]}')
   186                                                                   
   187                                                                   #if True:
   188       494     335000.0    678.1      0.0                          if unex - unexs[ptr] >= delta or r == 0:
   189                                                                       
   190       494     129000.0    261.1      0.0                              intents[r_new] = new_intent 
   191       494     129000.0    261.1      0.0                              len_new_intent = len(intents[r_new])
   192                                           
   193       494     158000.0    319.8      0.0                              unexs.append(unex)
   194       494     233000.0    471.7      0.0                              ptr += 1
   195       494   24238000.0  49064.8      0.0                              print(f'  --> Enter recursion with Intent: {names_col[intents[r_new]]}...')
   196                                           
   197                                                                       # New: if recursion depth is above a threshold, reorder attributes (randomly) to break the redundancy in patterns
   198       494    2309000.0   4674.1      0.0                              p = smoothing(len(unexs))
   199       494  213794000.0 432781.4      0.3                              X = stats.bernoulli(p)
   200                                           
   201                                                                       #if False:
   202       463   26756000.0  57788.3      0.0                              if not shuf and X.rvs(1)[0] == 1:
   203        31     157000.0   5064.5      0.0                                  print(f'Entering smoothing, val={smoothing(len(unexs))}')
   204        31      13000.0    419.4      0.0                                  start = j+1
   205        31       8000.0    258.1      0.0                                  end = len(names_col)
   206        31     810000.0  26129.0      0.0                                  rand_idxs = np.random.choice(np.arange(start, end), size=(end - start), replace=False)
   207        31      15000.0    483.9      0.0                                  if len(rand_idxs) > 0:
   208        31 4001059000.0 129066419.4      5.4                                      context = shuffle_columns(context, rand_idxs)
   209        31   41535000.0 1339838.7      0.1                                      context_csc = context.tocsc()
   210        31    2975000.0  95967.7      0.0                                      new_names_col = shuffle_columns(names_col, rand_idxs)
   211        31     154000.0   4967.7      0.0                                      print(start, end)
   212        31   12400000.0 400000.0      0.0                                      print(len(rand_idxs), rand_idxs, j)
   213        31    1793000.0  57838.7      0.0                                      print(new_names_col[j-1:j+5], names_col[j-1:j+5])
   214        31     391000.0  12612.9      0.0                                      degs = shuffle_columns(degs, rand_idxs)
   215        31      91000.0   2935.5      0.0                                      print(f"Next attr will be: {new_names_col[j+1]} instead of {names_col[j+1]}")
   216        31    1333000.0  43000.0      0.0                                      print(f'degs: {degs[j-2:j+10]}')
   217        31       6000.0    193.5      0.0                                      names_col = new_names_col
   218        31       8000.0    258.1      0.0                                      shuf = True
   219       438     112000.0    255.7      0.0                              elif shuf:
   220        25      63000.0   2520.0      0.0                                  print(f'no smoothing, Reorder attributes according to degrees')
   221        25  241752000.0 9670080.0      0.3                                  sort_index = np.argsort(get_degrees(context.astype(bool), transpose=True))
   222        25     160000.0   6400.0      0.0                                  new_degs = degs[sort_index]
   223        25   29145000.0 1165800.0      0.0                                  new_context = context[:, sort_index]
   224        25    1430000.0  57200.0      0.0                                  new_names_col = names_col[sort_index]
   225        25   34620000.0 1384800.0      0.0                                  context_csc = new_context.tocsc()
   226        25      71000.0   2840.0      0.0                                  degs = new_degs.copy()
   227        25   12105000.0 484200.0      0.0                                  context = new_context.copy()
   228        25    3890000.0 155600.0      0.0                                  names_col = new_names_col.copy()
   229        25    2263000.0  90520.0      0.0                                  print(f'degs: {degs[j-2:j+5]}')
   230        25       4000.0    160.0      0.0                                  shuf = False
   231                                           
   232       494     419000.0    848.2      0.0                              unex_patterns(adjacency, context, context_csc, extents, intents, r=r_new, y=j+1, min_support=min_support, 
   233       494     154000.0    311.7      0.0                                          max_support=max_support, beta=beta, delta=delta, degs=degs, unexs_g=unexs_g, 
   234       494     125000.0    253.0      0.0                                          unexs_a=unexs_a, unexs=unexs, names_col=names_col, comp_gen_graph=comp_gen_graph, shuf=shuf)
   235                                                                   else:
   236       101      45000.0    445.5      0.0                              print(f'IsCANNO but no U improvement')
   237       101    3235000.0  32029.7      0.0                              break
   238                                                               
   239                                                               else:
   240       640     743000.0   1160.9      0.0                          print(f'IsCannonical: False --> do not enter recursion.')
   241                                                               
   242                                               #print(f'inexs: {unexs}')        
   243       495     441000.0    890.9      0.0      print(f'r:{r} - r_new:{r_new}')
   244       495     297000.0    600.0      0.0      unexs.pop(-1)
   245       495     209000.0    422.2      0.0      ptr -= 1
   246       495      91000.0    183.8      0.0      shuf = False
   247                                               #print(f'inexs after pop: {unexs}')        
   248       495     219000.0    442.4      0.0      print(f'**END FUNCTION')
   249                                               
   250       495    4855000.0   9808.1      0.0      return [*zip(extents, intents)]

