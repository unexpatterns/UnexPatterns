Timer unit: 1e-09 s

Total time: 603.695 s
File: /Users/simondelarue/Documents/PhD/Research/Co-Meg/CoMEG/algorithm.py
Function: unex_patterns at line 62

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    62                                           def unex_patterns(adjacency, context, context_csc, extents, intents, r=0, y=0, min_support=0, max_support=np.inf, beta=0, 
    63                                                       delta=0, degs=[], unexs_g=[], unexs_a=[], unexs=[], names_col=[], comp_gen_graph=None, shuf=False) -> List:
    64                                               """InClose algorithm using Unexpectedness + IsCannonical function. 
    65                                               
    66                                               Parameters
    67                                               ----------
    68                                               adjacency: sparse.csr_matrix
    69                                                   Adjacency matrix of the graph
    70                                               context: sparse.csr_matrix
    71                                                   Features matrix of the graph. Contains nodes x attributes.
    72                                               context_csc: sparse.csc_matrix
    73                                                   Features matrix of the graph in CSC format.
    74                                               extents: list
    75                                                   List of extents, i.e sets of nodes.
    76                                               intents: list
    77                                                   List of intents, i.e sets of attributes.
    78                                               r: int (default=0)
    79                                                   Index of the pattern being filled.
    80                                               y: int (default=0)
    81                                                   Index of candidate attribute.
    82                                               min_support: int (default=0)
    83                                                   Minimum support value for extent.
    84                                               max_support: int (default +inf)
    85                                                   Maximum support value for extent.
    86                                               beta: int (default=0)
    87                                                   Minimum support value for intent.
    88                                               delta: int (default=0)
    89                                                   Minimum value for Unexpectedness difference between patterns.
    90                                               degs, unexs_g, unexs_a, unexs, names_col: list
    91                                                   Lists for value storage over recursion.
    92                                               comp_gen_graph: dict (default=None)
    93                                                   Dictionnary with number of nodes as keys and list of graph generation complexities as values.
    94                                                   
    95                                               Returns
    96                                               -------
    97                                                   List of tuples where each tuple is an unexpected pattern made of (extent, intent). 
    98                                               """
    99                                               global r_new
   100                                               global ptr
   101      3695    1537000.0    416.0      0.0      r_new = r_new + 1
   102                                               
   103      3695    2761000.0    747.2      0.0      print(f'NEW ITERATION \n --------')
   104      3695    3066000.0    829.8      0.0      print(f'r: {r} - r_new: {r_new}')
   105                                               # ------------------------------------------------
   106      3695  134655000.0  36442.5      0.0      print(f'|extents[r]|: {len(extents[r])} - intents[r]: {names_col[intents[r]]}')
   107                                               
   108   2983184  904549000.0    303.2      0.1      for j in np.arange(context.shape[1])[y:]:
   109   2983184 3614717000.0   1211.7      0.6          print(f"new attribute: {j} - {names_col[j]}")
   110   2983184  369441000.0    123.8      0.1          try:
   111   2979489  404718000.0    135.8      0.1              extents[r_new] = []
   112   2979489  453375000.0    152.2      0.1              unexs_g[r_new] = 0
   113   2979489  451173000.0    151.4      0.1              unexs_a[r_new] = 0
   114      3695    1218000.0    329.6      0.0          except IndexError:
   115      3695    1168000.0    316.1      0.0              extents.append([])
   116      3695     924000.0    250.1      0.0              unexs_g.append(0)
   117      3695    1014000.0    274.4      0.0              unexs_a.append(0)
   118                                           
   119                                                   # Form a new extent by adding extension of attribute j to current pattern extent
   120   2983184 139815315000.0  46867.8     23.2          ext_j = set(extension([j], context_csc))
   121                                                   #ext_j = set(extension([j], context))
   122   2983184 3514270000.0   1178.0      0.6          extents[r_new] = list(sorted(set(extents[r]).intersection(ext_j)))
   123   2983184  544979000.0    182.7      0.1          len_new_extent = len(extents[r_new])
   124                                                   
   125   2940932  381793000.0    129.8      0.1          if (len_new_extent >= min_support) and (len_new_extent <= max_support):
   126                                           
   127                                                       # Verify that length of intention of new extent is greater than a threshold (e.g beta)
   128                                                       # In other words, we only enter the loop if the new extent still has "space" to welcome enough new attributes
   129                                                       # Using this, we can trim all patterns with not enough attributes from the recursion tree
   130     42252 5081336000.0 120262.6      0.8              size_intention = len(intention(extents[r_new], context))
   131     33523    6519000.0    194.5      0.0              if size_intention >= beta: 
   132                                                               
   133     33523   67479000.0   2012.9      0.0                  new_intent = list(sorted(set(intents[r]).union(set([j]))))
   134                                                           
   135                                                           # Compute Unexpectedness on pattern (i.e on graph and attributes)
   136                                                           # ------------------------------------------------------------------------------------------------------------
   137     33523  137046000.0   4088.1      0.0                  print(f'  Extent size {len(extents[r_new])} - intent {new_intent}')
   138     33523    6682000.0    199.3      0.0                  size = len(new_intent)
   139     33523 13016601000.0 388288.7      2.2                  unex_g = graph_unexpectedness(adjacency[extents[r_new], :][:, extents[r_new]], comp_gen_graph)
   140     33523    8999000.0    268.4      0.0                  unexs_g[r_new] = unex_g
   141                                                           # Attributes unexpectedness
   142     33523  356110000.0  10622.9      0.1                  unex_a = attr_unexpectedness(context, new_intent, degs)
   143     33523    6754000.0    201.5      0.0                  unexs_a[r_new] = unex_a
   144                                                           # Total unexpectedness
   145     33523    6644000.0    198.2      0.0                  unex = unex_g + unex_a
   146                                                           #unexs[r_new] = unex
   147     33523   69758000.0   2080.9      0.0                  print(f'  U(G): {unex_g}')
   148     33523   60807000.0   1813.9      0.0                  print(f'  U(A): {unex_a}')
   149     33523   30804000.0    918.9      0.0                  print(f'  U: {unex}')
   150     33523  141535000.0   4222.0      0.0                  print(f'unexs: {unexs} r_new: {r_new} - r: {r} - ptr: {ptr}')
   151                                                           # ------------------------------------------------------------------------------------------------------------
   152                                                           
   153                                                           #if set(extents[r_new]) == set(extents[r]):
   154     17069    6730000.0    394.3      0.0                  if len_new_extent - len(extents[r]) == 0:
   155     16454   36305000.0   2206.5      0.0                      print(f' == comparing unex={unex} and unexs[{ptr}]={unexs[ptr]}')
   156                                                               
   157                                                               #if True:
   158     14543    5451000.0    374.8      0.0                      if unex - unexs[ptr] >= delta:
   159                                                               
   160     14543   19277000.0   1325.5      0.0                          print(f'  Extent size did not change -> attribute {names_col[j]} is added to intent.')
   161     14543    4279000.0    294.2      0.0                          intents[r] = new_intent
   162     14543    4141000.0    284.7      0.0                          unexs[-1] = unex
   163                                                               else:
   164      1911    3451000.0   1805.9      0.0                          print(f'STOP rec, unexpectedness difference is {unex - unexs[ptr]}')
   165      1911    2978000.0   1558.3      0.0                          print(f'Attribute {names_col[j]} ({j}) does not add any unexpectedness to pattern')
   166                                                                   #extents[r_new].pop(-1) -> no need to change the extent since we are in the block where it did not move by adding attribute
   167                                                                   #intents[r_new].pop(-1) -> at this stage, we only use new-intent, so no need to remove anything from intents parameter
   168                                                                   #raise Exception('end')
   169      1911   68069000.0  35619.6      0.0                          break
   170                                                               
   171                                                           else:
   172     17069 391909574000.0 22960312.5     64.9                      is_canno = is_cannonical(context, extents, intents, r, j - 1)
   173     13285    2696000.0    202.9      0.0                      if is_canno:
   174      3784   51466000.0  13601.0      0.0                          print(f'extents {extents[r]} intents {intents[r]} r {r} rnew {r_new}')
   175      3784    5774000.0   1525.9      0.0                          print(f'  Extent size DID change. IsCannonical: {is_canno}')
   176      3784     526000.0    139.0      0.0                          try:
   177      3695    3429000.0    928.0      0.0                              intents[r_new] = []
   178      3695    1520000.0    411.4      0.0                          except IndexError:
   179      3695    2115000.0    572.4      0.0                              intents.append([])
   180                                           
   181                                                                   #intents[r_new] = new_intent 
   182                                                                   #len_new_intent = len(intents[r_new])
   183                                           
   184      3784    2975000.0    786.2      0.0                          print(f'r:{r} rnew:{r_new}')
   185      3784   16095000.0   4253.4      0.0                          print(f' ISCANNO comparing unex={unex} and unexs[{ptr}]=={unexs[ptr]}')
   186                                                                   
   187                                                                   #if True:
   188      3694    2721000.0    736.6      0.0                          if unex - unexs[ptr] >= delta or r == 0:
   189                                                                       
   190      3694    1298000.0    351.4      0.0                              intents[r_new] = new_intent 
   191      3694    1202000.0    325.4      0.0                              len_new_intent = len(intents[r_new])
   192                                           
   193      3694     957000.0    259.1      0.0                              unexs.append(unex)
   194      3694    1799000.0    487.0      0.0                              ptr += 1
   195      3694  212821000.0  57612.6      0.0                              print(f'  --> Enter recursion with Intent: {names_col[intents[r_new]]}...')
   196                                           
   197                                                                       # New: if recursion depth is above a threshold, reorder attributes (randomly) to break the redundancy in patterns
   198      3694   18237000.0   4936.9      0.0                              p = smoothing(len(unexs))
   199      3694 1613791000.0 436868.2      0.3                              X = stats.bernoulli(p)
   200                                           
   201                                                                       #if False:
   202      3473  198648000.0  57197.8      0.0                              if not shuf and X.rvs(1)[0] == 1:
   203       221     992000.0   4488.7      0.0                                  print(f'Entering smoothing, val={smoothing(len(unexs))}')
   204       221      97000.0    438.9      0.0                                  start = j+1
   205       221      65000.0    294.1      0.0                                  end = len(names_col)
   206       221    6384000.0  28886.9      0.0                                  rand_idxs = np.random.choice(np.arange(start, end), size=(end - start), replace=False)
   207       219      85000.0    388.1      0.0                                  if len(rand_idxs) > 0:
   208       219 36060316000.0 164658977.2      6.0                                      context = shuffle_columns(context, rand_idxs)
   209       219  296360000.0 1353242.0      0.0                                      context_csc = context.tocsc()
   210       219   24618000.0 112411.0      0.0                                      new_names_col = shuffle_columns(names_col, rand_idxs)
   211       219    1051000.0   4799.1      0.0                                      print(start, end)
   212       219   77761000.0 355073.1      0.0                                      print(len(rand_idxs), rand_idxs, j)
   213       219   12655000.0  57785.4      0.0                                      print(new_names_col[j-1:j+5], names_col[j-1:j+5])
   214       219    3244000.0  14812.8      0.0                                      degs = shuffle_columns(degs, rand_idxs)
   215       219     633000.0   2890.4      0.0                                      print(f"Next attr will be: {new_names_col[j+1]} instead of {names_col[j+1]}")
   216       219    9595000.0  43812.8      0.0                                      print(f'degs: {degs[j-2:j+10]}')
   217       219      42000.0    191.8      0.0                                      names_col = new_names_col
   218       219      48000.0    219.2      0.0                                      shuf = True
   219      3260     753000.0    231.0      0.0                              elif shuf:
   220       213     138000.0    647.9      0.0                                  print(f'no smoothing, Reorder attributes according to degrees')
   221       213 2166454000.0 10171145.5      0.4                                  sort_index = np.argsort(get_degrees(context.astype(bool), transpose=True))
   222       213    1787000.0   8389.7      0.0                                  new_degs = degs[sort_index]
   223       213  265711000.0 1247469.5      0.0                                  new_context = context[:, sort_index]
   224       213   19360000.0  90892.0      0.0                                  new_names_col = names_col[sort_index]
   225       213  308760000.0 1449577.5      0.1                                  context_csc = new_context.tocsc()
   226       213   11034000.0  51802.8      0.0                                  degs = new_degs.copy()
   227       213   99372000.0 466535.2      0.0                                  context = new_context.copy()
   228       213   25777000.0 121018.8      0.0                                  names_col = new_names_col.copy()
   229       213   17305000.0  81244.1      0.0                                  print(f'degs: {degs[j-2:j+5]}')
   230       213      40000.0    187.8      0.0                                  shuf = False
   231                                           
   232      3694    3432000.0    929.1      0.0                              unex_patterns(adjacency, context, context_csc, extents, intents, r=r_new, y=j+1, min_support=min_support, 
   233      3694    1047000.0    283.4      0.0                                          max_support=max_support, beta=beta, delta=delta, degs=degs, unexs_g=unexs_g, 
   234      3694     891000.0    241.2      0.0                                          unexs_a=unexs_a, unexs=unexs, names_col=names_col, comp_gen_graph=comp_gen_graph, shuf=shuf)
   235                                                                   else:
   236        90      59000.0    655.6      0.0                              print(f'IsCANNO but no U improvement')
   237        90    2655000.0  29500.0      0.0                              break
   238                                                               
   239                                                               else:
   240     13285   20909000.0   1573.9      0.0                          print(f'IsCannonical: False --> do not enter recursion.')
   241                                                               
   242                                               #print(f'inexs: {unexs}')        
   243      3695    4043000.0   1094.2      0.0      print(f'r:{r} - r_new:{r_new}')
   244      3695    2236000.0    605.1      0.0      unexs.pop(-1)
   245      3695    1463000.0    395.9      0.0      ptr -= 1
   246      3695     716000.0    193.8      0.0      shuf = False
   247                                               #print(f'inexs after pop: {unexs}')        
   248      3695    1594000.0    431.4      0.0      print(f'**END FUNCTION')
   249                                               
   250      3695  449755000.0 121719.9      0.1      return [*zip(extents, intents)]

