Timer unit: 1e-09 s

Total time: 295.965 s
File: /Users/simondelarue/Documents/PhD/Research/Co-Meg/CoMEG/algorithm.py
Function: unex_patterns at line 62

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    62                                           def unex_patterns(adjacency, context, context_csc, extents, intents, r=0, y=0, min_support=0, max_support=np.inf, beta=0, 
    63                                                       delta=0, degs=[], unexs_g=[], unexs_a=[], unexs=[], names_col=[], comp_gen_graph=None, shuf=False) -> List:
    64                                               """InClose algorithm using Unexpectedness + IsCannonical function. 
    65                                               
    66                                               Parameters
    67                                               ----------
    68                                               adjacency: sparse.csr_matrix
    69                                                   Adjacency matrix of the graph
    70                                               context: sparse.csr_matrix
    71                                                   Features matrix of the graph. Contains nodes x attributes.
    72                                               context_csc: sparse.csc_matrix
    73                                                   Features matrix of the graph in CSC format.
    74                                               extents: list
    75                                                   List of extents, i.e sets of nodes.
    76                                               intents: list
    77                                                   List of intents, i.e sets of attributes.
    78                                               r: int (default=0)
    79                                                   Index of the pattern being filled.
    80                                               y: int (default=0)
    81                                                   Index of candidate attribute.
    82                                               min_support: int (default=0)
    83                                                   Minimum support value for extent.
    84                                               max_support: int (default +inf)
    85                                                   Maximum support value for extent.
    86                                               beta: int (default=0)
    87                                                   Minimum support value for intent.
    88                                               delta: int (default=0)
    89                                                   Minimum value for Unexpectedness difference between patterns.
    90                                               degs, unexs_g, unexs_a, unexs, names_col: list
    91                                                   Lists for value storage over recursion.
    92                                               comp_gen_graph: dict (default=None)
    93                                                   Dictionnary with number of nodes as keys and list of graph generation complexities as values.
    94                                                   
    95                                               Returns
    96                                               -------
    97                                                   List of tuples where each tuple is an unexpected pattern made of (extent, intent). 
    98                                               """
    99                                               global r_new
   100                                               global ptr
   101       660     261000.0    395.5      0.0      r_new = r_new + 1
   102                                               
   103       660     489000.0    740.9      0.0      print(f'NEW ITERATION \n --------')
   104       660     533000.0    807.6      0.0      print(f'r: {r} - r_new: {r_new}')
   105                                               # ------------------------------------------------
   106       660   23602000.0  35760.6      0.0      print(f'|extents[r]|: {len(extents[r])} - intents[r]: {names_col[intents[r]]}')
   107                                               
   108   2638918  710638000.0    269.3      0.2      for j in np.arange(context.shape[1])[y:]:
   109   2638918 3309758000.0   1254.2      1.1          print(f"new attribute: {j} - {names_col[j]}")
   110   2638918  330734000.0    125.3      0.1          try:
   111   2638258  383884000.0    145.5      0.1              extents[r_new] = []
   112   2638258  413194000.0    156.6      0.1              unexs_g[r_new] = 0
   113   2638258  392426000.0    148.7      0.1              unexs_a[r_new] = 0
   114       660     194000.0    293.9      0.0          except IndexError:
   115       660     250000.0    378.8      0.0              extents.append([])
   116       660     169000.0    256.1      0.0              unexs_g.append(0)
   117       660     184000.0    278.8      0.0              unexs_a.append(0)
   118                                           
   119                                                   # Form a new extent by adding extension of attribute j to current pattern extent
   120   2638918 119369363000.0  45234.2     40.3          ext_j = set(extension([j], context_csc))
   121                                                   #ext_j = set(extension([j], context))
   122   2638918 7184563000.0   2722.5      2.4          extents[r_new] = list(sorted(set(extents[r]).intersection(ext_j)))
   123   2638918  491218000.0    186.1      0.2          len_new_extent = len(extents[r_new])
   124                                                   
   125   2619248  367682000.0    140.4      0.1          if (len_new_extent >= min_support) and (len_new_extent <= max_support):
   126                                           
   127                                                       # Verify that length of intention of new extent is greater than a threshold (e.g beta)
   128                                                       # In other words, we only enter the loop if the new extent still has "space" to welcome enough new attributes
   129                                                       # Using this, we can trim all patterns with not enough attributes from the recursion tree
   130     19670 6268438000.0 318680.1      2.1              size_intention = len(intention(extents[r_new], context))
   131     15956    2646000.0    165.8      0.0              if size_intention >= beta: 
   132                                                               
   133      3714    7618000.0   2051.2      0.0                  new_intent = list(sorted(set(intents[r]).union(set([j]))))
   134                                                           
   135                                                           # Compute Unexpectedness on pattern (i.e on graph and attributes)
   136                                                           # ------------------------------------------------------------------------------------------------------------
   137      3714   14173000.0   3816.1      0.0                  print(f'  Extent size {len(extents[r_new])} - intent {new_intent}')
   138      3714     758000.0    204.1      0.0                  size = len(new_intent)
   139      3714 1661307000.0 447309.4      0.6                  unex_g = graph_unexpectedness(adjacency[extents[r_new], :][:, extents[r_new]], comp_gen_graph)
   140      3714    1084000.0    291.9      0.0                  unexs_g[r_new] = unex_g
   141                                                           # Attributes unexpectedness
   142      3714   36797000.0   9907.6      0.0                  unex_a = attr_unexpectedness(context, new_intent, degs)
   143      3714     712000.0    191.7      0.0                  unexs_a[r_new] = unex_a
   144                                                           # Total unexpectedness
   145      3714     707000.0    190.4      0.0                  unex = unex_g + unex_a
   146                                                           #unexs[r_new] = unex
   147      3714    7330000.0   1973.6      0.0                  print(f'  U(G): {unex_g}')
   148      3714    3716000.0   1000.5      0.0                  print(f'  U(A): {unex_a}')
   149      3714    3386000.0    911.7      0.0                  print(f'  U: {unex}')
   150      3714   11221000.0   3021.3      0.0                  print(f'unexs: {unexs} r_new: {r_new} - r: {r} - ptr: {ptr}')
   151                                                           # ------------------------------------------------------------------------------------------------------------
   152                                                           
   153                                                           #if set(extents[r_new]) == set(extents[r]):
   154      2144     828000.0    386.2      0.0                  if len_new_extent - len(extents[r]) == 0:
   155      2144   32953000.0  15369.9      0.0                      print(f' == comparing unex={unex} and unexs[{ptr}]={unexs[ptr]}')
   156                                                               
   157                                                               #if True:
   158      2142     908000.0    423.9      0.0                      if unex - unexs[ptr] >= delta:
   159                                                               
   160      2142    2909000.0   1358.1      0.0                          print(f'  Extent size did not change -> attribute {names_col[j]} is added to intent.')
   161      2142     619000.0    289.0      0.0                          intents[r] = new_intent
   162      2142     635000.0    296.5      0.0                          unexs[-1] = unex
   163                                                               else:
   164         2       3000.0   1500.0      0.0                          print(f'STOP rec, unexpectedness difference is {unex - unexs[ptr]}')
   165         2       3000.0   1500.0      0.0                          print(f'Attribute {names_col[j]} ({j}) does not add any unexpectedness to pattern')
   166                                                                   #extents[r_new].pop(-1) -> no need to change the extent since we are in the block where it did not move by adding attribute
   167                                                                   #intents[r_new].pop(-1) -> at this stage, we only use new-intent, so no need to remove anything from intents parameter
   168                                                                   #raise Exception('end')
   169         2       4000.0   2000.0      0.0                          break
   170                                                               
   171                                                           else:
   172      1570 111876267000.0 71258768.8     37.8                      is_canno = is_cannonical(context, extents, intents, r, j - 1)
   173       863     210000.0    243.3      0.0                      if is_canno:
   174       707   21813000.0  30852.9      0.0                          print(f'extents {extents[r]} intents {intents[r]} r {r} rnew {r_new}')
   175       707    1092000.0   1544.6      0.0                          print(f'  Extent size DID change. IsCannonical: {is_canno}')
   176       707     166000.0    234.8      0.0                          try:
   177       659     680000.0   1031.9      0.0                              intents[r_new] = []
   178       659     244000.0    370.3      0.0                          except IndexError:
   179       659     420000.0    637.3      0.0                              intents.append([])
   180                                           
   181                                                                   #intents[r_new] = new_intent 
   182                                                                   #len_new_intent = len(intents[r_new])
   183                                           
   184       707     606000.0    857.1      0.0                          print(f'r:{r} rnew:{r_new}')
   185       707    2837000.0   4012.7      0.0                          print(f' ISCANNO comparing unex={unex} and unexs[{ptr}]=={unexs[ptr]}')
   186                                                                   
   187                                                                   #if True:
   188       659     453000.0    687.4      0.0                          if unex - unexs[ptr] >= delta or r == 0:
   189                                                                       
   190       659     163000.0    247.3      0.0                              intents[r_new] = new_intent 
   191       659     234000.0    355.1      0.0                              len_new_intent = len(intents[r_new])
   192                                           
   193       659     176000.0    267.1      0.0                              unexs.append(unex)
   194       659     300000.0    455.2      0.0                              ptr += 1
   195       659   33883000.0  51415.8      0.0                              print(f'  --> Enter recursion with Intent: {names_col[intents[r_new]]}...')
   196                                           
   197                                                                       # New: if recursion depth is above a threshold, reorder attributes (randomly) to break the redundancy in patterns
   198       659    3364000.0   5104.7      0.0                              p = smoothing(len(unexs))
   199       659  293842000.0 445890.7      0.1                              X = stats.bernoulli(p)
   200                                           
   201                                                                       #if False:
   202       631   36306000.0  57537.2      0.0                              if not shuf and X.rvs(1)[0] == 1:
   203        28     102000.0   3642.9      0.0                                  print(f'Entering smoothing, val={smoothing(len(unexs))}')
   204        28       7000.0    250.0      0.0                                  start = j+1
   205        28      11000.0    392.9      0.0                                  end = len(names_col)
   206        28    1643000.0  58678.6      0.0                                  rand_idxs = np.random.choice(np.arange(start, end), size=(end - start), replace=False)
   207        28       9000.0    321.4      0.0                                  if len(rand_idxs) > 0:
   208        28 41763464000.0 1491552285.7     14.1                                      context = shuffle_columns(context, rand_idxs)
   209        28   87707000.0 3132392.9      0.0                                      context_csc = context.tocsc()
   210        28    6164000.0 220142.9      0.0                                      new_names_col = shuffle_columns(names_col, rand_idxs)
   211        28     138000.0   4928.6      0.0                                      print(start, end)
   212        28   19306000.0 689500.0      0.0                                      print(len(rand_idxs), rand_idxs, j)
   213        28    1667000.0  59535.7      0.0                                      print(new_names_col[j-1:j+5], names_col[j-1:j+5])
   214        28     782000.0  27928.6      0.0                                      degs = shuffle_columns(degs, rand_idxs)
   215        28      84000.0   3000.0      0.0                                      print(f"Next attr will be: {new_names_col[j+1]} instead of {names_col[j+1]}")
   216        28    1235000.0  44107.1      0.0                                      print(f'degs: {degs[j-2:j+10]}')
   217        28      60000.0   2142.9      0.0                                      names_col = new_names_col
   218        28      10000.0    357.1      0.0                                      shuf = True
   219       600     146000.0    243.3      0.0                              elif shuf:
   220        31      15000.0    483.9      0.0                                  print(f'no smoothing, Reorder attributes according to degrees')
   221        31  525046000.0 16936967.7      0.2                                  sort_index = np.argsort(get_degrees(context.astype(bool), transpose=True))
   222        31     456000.0  14709.7      0.0                                  new_degs = degs[sort_index]
   223        31   81701000.0 2635516.1      0.0                                  new_context = context[:, sort_index]
   224        31    7783000.0 251064.5      0.0                                  new_names_col = names_col[sort_index]
   225        31   99321000.0 3203903.2      0.0                                  context_csc = new_context.tocsc()
   226        31    3426000.0 110516.1      0.0                                  degs = new_degs.copy()
   227        31   31923000.0 1029774.2      0.0                                  context = new_context.copy()
   228        31    4666000.0 150516.1      0.0                                  names_col = new_names_col.copy()
   229        31    2749000.0  88677.4      0.0                                  print(f'degs: {degs[j-2:j+5]}')
   230        31      13000.0    419.4      0.0                                  shuf = False
   231                                           
   232       659     616000.0    934.7      0.0                              unex_patterns(adjacency, context, context_csc, extents, intents, r=r_new, y=j+1, min_support=min_support, 
   233       659     177000.0    268.6      0.0                                          max_support=max_support, beta=beta, delta=delta, degs=degs, unexs_g=unexs_g, 
   234       659     143000.0    217.0      0.0                                          unexs_a=unexs_a, unexs=unexs, names_col=names_col, comp_gen_graph=comp_gen_graph, shuf=shuf)
   235                                                                   else:
   236        48      35000.0    729.2      0.0                              print(f'IsCANNO but no U improvement')
   237        48    1184000.0  24666.7      0.0                              break
   238                                                               
   239                                                               else:
   240       863     962000.0   1114.7      0.0                          print(f'IsCannonical: False --> do not enter recursion.')
   241                                                               
   242                                               #print(f'inexs: {unexs}')        
   243       660     788000.0   1193.9      0.0      print(f'r:{r} - r_new:{r_new}')
   244       660     445000.0    674.2      0.0      unexs.pop(-1)
   245       660     276000.0    418.2      0.0      ptr -= 1
   246       660     123000.0    186.4      0.0      shuf = False
   247                                               #print(f'inexs after pop: {unexs}')        
   248       660     346000.0    524.2      0.0      print(f'**END FUNCTION')
   249                                               
   250       660    9551000.0  14471.2      0.0      return [*zip(extents, intents)]

