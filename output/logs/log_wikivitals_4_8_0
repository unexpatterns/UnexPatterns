Timer unit: 1e-09 s

Total time: 81.3313 s
File: /Users/simondelarue/Documents/PhD/Research/Co-Meg/CoMEG/algorithm.py
Function: unex_patterns at line 62

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    62                                           def unex_patterns(adjacency, context, context_csc, extents, intents, r=0, y=0, min_support=0, max_support=np.inf, beta=0, 
    63                                                       delta=0, degs=[], unexs_g=[], unexs_a=[], unexs=[], names_col=[], comp_gen_graph=None, shuf=False) -> List:
    64                                               """InClose algorithm using Unexpectedness + IsCannonical function. 
    65                                               
    66                                               Parameters
    67                                               ----------
    68                                               adjacency: sparse.csr_matrix
    69                                                   Adjacency matrix of the graph
    70                                               context: sparse.csr_matrix
    71                                                   Features matrix of the graph. Contains nodes x attributes.
    72                                               context_csc: sparse.csc_matrix
    73                                                   Features matrix of the graph in CSC format.
    74                                               extents: list
    75                                                   List of extents, i.e sets of nodes.
    76                                               intents: list
    77                                                   List of intents, i.e sets of attributes.
    78                                               r: int (default=0)
    79                                                   Index of the pattern being filled.
    80                                               y: int (default=0)
    81                                                   Index of candidate attribute.
    82                                               min_support: int (default=0)
    83                                                   Minimum support value for extent.
    84                                               max_support: int (default +inf)
    85                                                   Maximum support value for extent.
    86                                               beta: int (default=0)
    87                                                   Minimum support value for intent.
    88                                               delta: int (default=0)
    89                                                   Minimum value for Unexpectedness difference between patterns.
    90                                               degs, unexs_g, unexs_a, unexs, names_col: list
    91                                                   Lists for value storage over recursion.
    92                                               comp_gen_graph: dict (default=None)
    93                                                   Dictionnary with number of nodes as keys and list of graph generation complexities as values.
    94                                                   
    95                                               Returns
    96                                               -------
    97                                                   List of tuples where each tuple is an unexpected pattern made of (extent, intent). 
    98                                               """
    99                                               global r_new
   100                                               global ptr
   101       246     100000.0    406.5      0.0      r_new = r_new + 1
   102                                               
   103       246     193000.0    784.6      0.0      print(f'NEW ITERATION \n --------')
   104       246     210000.0    853.7      0.0      print(f'r: {r} - r_new: {r_new}')
   105                                               # ------------------------------------------------
   106       246    9426000.0  38317.1      0.0      print(f'|extents[r]|: {len(extents[r])} - intents[r]: {names_col[intents[r]]}')
   107                                               
   108    651145  183207000.0    281.4      0.2      for j in np.arange(context.shape[1])[y:]:
   109    651145  737398000.0   1132.5      0.9          print(f"new attribute: {j} - {names_col[j]}")
   110    651145   81838000.0    125.7      0.1          try:
   111    650899   92840000.0    142.6      0.1              extents[r_new] = []
   112    650899   98724000.0    151.7      0.1              unexs_g[r_new] = 0
   113    650899   98301000.0    151.0      0.1              unexs_a[r_new] = 0
   114       246      63000.0    256.1      0.0          except IndexError:
   115       246      72000.0    292.7      0.0              extents.append([])
   116       246      70000.0    284.6      0.0              unexs_g.append(0)
   117       246      93000.0    378.0      0.0              unexs_a.append(0)
   118                                           
   119                                                   # Form a new extent by adding extension of attribute j to current pattern extent
   120    651145 30357654000.0  46622.0     37.3          ext_j = set(extension([j], context_csc))
   121                                                   #ext_j = set(extension([j], context))
   122    651145 4876709000.0   7489.4      6.0          extents[r_new] = list(sorted(set(extents[r]).intersection(ext_j)))
   123    651145  118152000.0    181.5      0.1          len_new_extent = len(extents[r_new])
   124                                                   
   125    637185   89550000.0    140.5      0.1          if (len_new_extent >= min_support) and (len_new_extent <= max_support):
   126                                           
   127                                                       # Verify that length of intention of new extent is greater than a threshold (e.g beta)
   128                                                       # In other words, we only enter the loop if the new extent still has "space" to welcome enough new attributes
   129                                                       # Using this, we can trim all patterns with not enough attributes from the recursion tree
   130     13960 5735098000.0 410823.6      7.1              size_intention = len(intention(extents[r_new], context))
   131     13131    2284000.0    173.9      0.0              if size_intention >= beta: 
   132                                                               
   133       829    1703000.0   2054.3      0.0                  new_intent = list(sorted(set(intents[r]).union(set([j]))))
   134                                                           
   135                                                           # Compute Unexpectedness on pattern (i.e on graph and attributes)
   136                                                           # ------------------------------------------------------------------------------------------------------------
   137       829    3431000.0   4138.7      0.0                  print(f'  Extent size {len(extents[r_new])} - intent {new_intent}')
   138       829     166000.0    200.2      0.0                  size = len(new_intent)
   139       829  393750000.0 474969.8      0.5                  unex_g = graph_unexpectedness(adjacency[extents[r_new], :][:, extents[r_new]], comp_gen_graph)
   140       829     237000.0    285.9      0.0                  unexs_g[r_new] = unex_g
   141                                                           # Attributes unexpectedness
   142       829    8324000.0  10041.0      0.0                  unex_a = attr_unexpectedness(context, new_intent, degs)
   143       829     159000.0    191.8      0.0                  unexs_a[r_new] = unex_a
   144                                                           # Total unexpectedness
   145       829     157000.0    189.4      0.0                  unex = unex_g + unex_a
   146                                                           #unexs[r_new] = unex
   147       829    1888000.0   2277.4      0.0                  print(f'  U(G): {unex_g}')
   148       829     884000.0   1066.3      0.0                  print(f'  U(A): {unex_a}')
   149       829     753000.0    908.3      0.0                  print(f'  U: {unex}')
   150       829    2485000.0   2997.6      0.0                  print(f'unexs: {unexs} r_new: {r_new} - r: {r} - ptr: {ptr}')
   151                                                           # ------------------------------------------------------------------------------------------------------------
   152                                                           
   153                                                           #if set(extents[r_new]) == set(extents[r]):
   154       462     185000.0    400.4      0.0                  if len_new_extent - len(extents[r]) == 0:
   155       462     859000.0   1859.3      0.0                      print(f' == comparing unex={unex} and unexs[{ptr}]={unexs[ptr]}')
   156                                                               
   157                                                               #if True:
   158       462     193000.0    417.7      0.0                      if unex - unexs[ptr] >= delta:
   159                                                               
   160       462     698000.0   1510.8      0.0                          print(f'  Extent size did not change -> attribute {names_col[j]} is added to intent.')
   161       462     133000.0    287.9      0.0                          intents[r] = new_intent
   162       462     126000.0    272.7      0.0                          unexs[-1] = unex
   163                                                               else:
   164                                                                   print(f'STOP rec, unexpectedness difference is {unex - unexs[ptr]}')
   165                                                                   print(f'Attribute {names_col[j]} ({j}) does not add any unexpectedness to pattern')
   166                                                                   #extents[r_new].pop(-1) -> no need to change the extent since we are in the block where it did not move by adding attribute
   167                                                                   #intents[r_new].pop(-1) -> at this stage, we only use new-intent, so no need to remove anything from intents parameter
   168                                                                   #raise Exception('end')
   169                                                                   break
   170                                                               
   171                                                           else:
   172       367 32856565000.0 89527425.1     40.4                      is_canno = is_cannonical(context, extents, intents, r, j - 1)
   173       261      55000.0    210.7      0.0                      if is_canno:
   174       261    5319000.0  20379.3      0.0                          print(f'extents {extents[r]} intents {intents[r]} r {r} rnew {r_new}')
   175       261     308000.0   1180.1      0.0                          print(f'  Extent size DID change. IsCannonical: {is_canno}')
   176       261      33000.0    126.4      0.0                          try:
   177       245     246000.0   1004.1      0.0                              intents[r_new] = []
   178       245      83000.0    338.8      0.0                          except IndexError:
   179       245     152000.0    620.4      0.0                              intents.append([])
   180                                           
   181                                                                   #intents[r_new] = new_intent 
   182                                                                   #len_new_intent = len(intents[r_new])
   183                                           
   184       261     186000.0    712.6      0.0                          print(f'r:{r} rnew:{r_new}')
   185       261     949000.0   3636.0      0.0                          print(f' ISCANNO comparing unex={unex} and unexs[{ptr}]=={unexs[ptr]}')
   186                                                                   
   187                                                                   #if True:
   188       245     152000.0    620.4      0.0                          if unex - unexs[ptr] >= delta or r == 0:
   189                                                                       
   190       245      54000.0    220.4      0.0                              intents[r_new] = new_intent 
   191       245      69000.0    281.6      0.0                              len_new_intent = len(intents[r_new])
   192                                           
   193       245      53000.0    216.3      0.0                              unexs.append(unex)
   194       245     121000.0    493.9      0.0                              ptr += 1
   195       245   11993000.0  48951.0      0.0                              print(f'  --> Enter recursion with Intent: {names_col[intents[r_new]]}...')
   196                                           
   197                                                                       # New: if recursion depth is above a threshold, reorder attributes (randomly) to break the redundancy in patterns
   198       245    1137000.0   4640.8      0.0                              p = smoothing(len(unexs))
   199       245  110140000.0 449551.0      0.1                              X = stats.bernoulli(p)
   200                                           
   201                                                                       #if False:
   202       240   14351000.0  59795.8      0.0                              if not shuf and X.rvs(1)[0] == 1:
   203         5      22000.0   4400.0      0.0                                  print(f'Entering smoothing, val={smoothing(len(unexs))}')
   204         5       2000.0    400.0      0.0                                  start = j+1
   205         5          0.0      0.0      0.0                                  end = len(names_col)
   206         5     260000.0  52000.0      0.0                                  rand_idxs = np.random.choice(np.arange(start, end), size=(end - start), replace=False)
   207         5       1000.0    200.0      0.0                                  if len(rand_idxs) > 0:
   208         5 5245448000.0 1049089600.0      6.4                                      context = shuffle_columns(context, rand_idxs)
   209         5   16153000.0 3230600.0      0.0                                      context_csc = context.tocsc()
   210         5     682000.0 136400.0      0.0                                      new_names_col = shuffle_columns(names_col, rand_idxs)
   211         5      22000.0   4400.0      0.0                                      print(start, end)
   212         5    1947000.0 389400.0      0.0                                      print(len(rand_idxs), rand_idxs, j)
   213         5     462000.0  92400.0      0.0                                      print(new_names_col[j-1:j+5], names_col[j-1:j+5])
   214         5      98000.0  19600.0      0.0                                      degs = shuffle_columns(degs, rand_idxs)
   215         5      14000.0   2800.0      0.0                                      print(f"Next attr will be: {new_names_col[j+1]} instead of {names_col[j+1]}")
   216         5     227000.0  45400.0      0.0                                      print(f'degs: {degs[j-2:j+10]}')
   217         5       1000.0    200.0      0.0                                      names_col = new_names_col
   218         5       1000.0    200.0      0.0                                      shuf = True
   219       234      73000.0    312.0      0.0                              elif shuf:
   220         6       4000.0    666.7      0.0                                  print(f'no smoothing, Reorder attributes according to degrees')
   221         6  119555000.0 19925833.3      0.1                                  sort_index = np.argsort(get_degrees(context.astype(bool), transpose=True))
   222         6      71000.0  11833.3      0.0                                  new_degs = degs[sort_index]
   223         6   14406000.0 2401000.0      0.0                                  new_context = context[:, sort_index]
   224         6    1165000.0 194166.7      0.0                                  new_names_col = names_col[sort_index]
   225         6   19479000.0 3246500.0      0.0                                  context_csc = new_context.tocsc()
   226         6     388000.0  64666.7      0.0                                  degs = new_degs.copy()
   227         6    6904000.0 1150666.7      0.0                                  context = new_context.copy()
   228         6     625000.0 104166.7      0.0                                  names_col = new_names_col.copy()
   229         6     564000.0  94000.0      0.0                                  print(f'degs: {degs[j-2:j+5]}')
   230         6       1000.0    166.7      0.0                                  shuf = False
   231                                           
   232       245     225000.0    918.4      0.0                              unex_patterns(adjacency, context, context_csc, extents, intents, r=r_new, y=j+1, min_support=min_support, 
   233       245      66000.0    269.4      0.0                                          max_support=max_support, beta=beta, delta=delta, degs=degs, unexs_g=unexs_g, 
   234       245      57000.0    232.7      0.0                                          unexs_a=unexs_a, unexs=unexs, names_col=names_col, comp_gen_graph=comp_gen_graph, shuf=shuf)
   235                                                                   else:
   236        16      10000.0    625.0      0.0                              print(f'IsCANNO but no U improvement')
   237        16      34000.0   2125.0      0.0                              break
   238                                                               
   239                                                               else:
   240       106     111000.0   1047.2      0.0                          print(f'IsCannonical: False --> do not enter recursion.')
   241                                                               
   242                                               #print(f'inexs: {unexs}')        
   243       246     249000.0   1012.2      0.0      print(f'r:{r} - r_new:{r_new}')
   244       246     171000.0    695.1      0.0      unexs.pop(-1)
   245       246     115000.0    467.5      0.0      ptr -= 1
   246       246      41000.0    166.7      0.0      shuf = False
   247                                               #print(f'inexs after pop: {unexs}')        
   248       246      98000.0    398.4      0.0      print(f'**END FUNCTION')
   249                                               
   250       246    1419000.0   5768.3      0.0      return [*zip(extents, intents)]

