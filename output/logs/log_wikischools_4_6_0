Timer unit: 1e-09 s

Total time: 279.281 s
File: /Users/simondelarue/Documents/PhD/Research/Co-Meg/CoMEG/algorithm.py
Function: unex_patterns at line 62

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    62                                           def unex_patterns(adjacency, context, context_csc, extents, intents, r=0, y=0, min_support=0, max_support=np.inf, beta=0, 
    63                                                       delta=0, degs=[], unexs_g=[], unexs_a=[], unexs=[], names_col=[], comp_gen_graph=None, shuf=False) -> List:
    64                                               """InClose algorithm using Unexpectedness + IsCannonical function. 
    65                                               
    66                                               Parameters
    67                                               ----------
    68                                               adjacency: sparse.csr_matrix
    69                                                   Adjacency matrix of the graph
    70                                               context: sparse.csr_matrix
    71                                                   Features matrix of the graph. Contains nodes x attributes.
    72                                               context_csc: sparse.csc_matrix
    73                                                   Features matrix of the graph in CSC format.
    74                                               extents: list
    75                                                   List of extents, i.e sets of nodes.
    76                                               intents: list
    77                                                   List of intents, i.e sets of attributes.
    78                                               r: int (default=0)
    79                                                   Index of the pattern being filled.
    80                                               y: int (default=0)
    81                                                   Index of candidate attribute.
    82                                               min_support: int (default=0)
    83                                                   Minimum support value for extent.
    84                                               max_support: int (default +inf)
    85                                                   Maximum support value for extent.
    86                                               beta: int (default=0)
    87                                                   Minimum support value for intent.
    88                                               delta: int (default=0)
    89                                                   Minimum value for Unexpectedness difference between patterns.
    90                                               degs, unexs_g, unexs_a, unexs, names_col: list
    91                                                   Lists for value storage over recursion.
    92                                               comp_gen_graph: dict (default=None)
    93                                                   Dictionnary with number of nodes as keys and list of graph generation complexities as values.
    94                                                   
    95                                               Returns
    96                                               -------
    97                                                   List of tuples where each tuple is an unexpected pattern made of (extent, intent). 
    98                                               """
    99                                               global r_new
   100                                               global ptr
   101      1727     653000.0    378.1      0.0      r_new = r_new + 1
   102                                               
   103      1727    1290000.0    747.0      0.0      print(f'NEW ITERATION \n --------')
   104      1727    1409000.0    815.9      0.0      print(f'r: {r} - r_new: {r_new}')
   105                                               # ------------------------------------------------
   106      1727   65028000.0  37653.7      0.0      print(f'|extents[r]|: {len(extents[r])} - intents[r]: {names_col[intents[r]]}')
   107                                               
   108   1412584  419847000.0    297.2      0.2      for j in np.arange(context.shape[1])[y:]:
   109   1412584 1730803000.0   1225.3      0.6          print(f"new attribute: {j} - {names_col[j]}")
   110   1412584  182348000.0    129.1      0.1          try:
   111   1410857  199791000.0    141.6      0.1              extents[r_new] = []
   112   1410857  218624000.0    155.0      0.1              unexs_g[r_new] = 0
   113   1410857  210338000.0    149.1      0.1              unexs_a[r_new] = 0
   114      1727     557000.0    322.5      0.0          except IndexError:
   115      1727     546000.0    316.2      0.0              extents.append([])
   116      1727     429000.0    248.4      0.0              unexs_g.append(0)
   117      1727     454000.0    262.9      0.0              unexs_a.append(0)
   118                                           
   119                                                   # Form a new extent by adding extension of attribute j to current pattern extent
   120   1412584 68102532000.0  48211.3     24.4          ext_j = set(extension([j], context_csc))
   121                                                   #ext_j = set(extension([j], context))
   122   1412584 2259704000.0   1599.7      0.8          extents[r_new] = list(sorted(set(extents[r]).intersection(ext_j)))
   123   1412584  260669000.0    184.5      0.1          len_new_extent = len(extents[r_new])
   124                                                   
   125   1393393  183178000.0    131.5      0.1          if (len_new_extent >= min_support) and (len_new_extent <= max_support):
   126                                           
   127                                                       # Verify that length of intention of new extent is greater than a threshold (e.g beta)
   128                                                       # In other words, we only enter the loop if the new extent still has "space" to welcome enough new attributes
   129                                                       # Using this, we can trim all patterns with not enough attributes from the recursion tree
   130     19191 3685047000.0 192019.5      1.3              size_intention = len(intention(extents[r_new], context))
   131     11431    2226000.0    194.7      0.0              if size_intention >= beta: 
   132                                                               
   133     11431   23118000.0   2022.4      0.0                  new_intent = list(sorted(set(intents[r]).union(set([j]))))
   134                                                           
   135                                                           # Compute Unexpectedness on pattern (i.e on graph and attributes)
   136                                                           # ------------------------------------------------------------------------------------------------------------
   137     11431   41157000.0   3600.5      0.0                  print(f'  Extent size {len(extents[r_new])} - intent {new_intent}')
   138     11431    2291000.0    200.4      0.0                  size = len(new_intent)
   139     11431 4631006000.0 405126.9      1.7                  unex_g = graph_unexpectedness(adjacency[extents[r_new], :][:, extents[r_new]], comp_gen_graph)
   140     11431    3207000.0    280.6      0.0                  unexs_g[r_new] = unex_g
   141                                                           # Attributes unexpectedness
   142     11431  118680000.0  10382.3      0.0                  unex_a = attr_unexpectedness(context, new_intent, degs)
   143     11431    2316000.0    202.6      0.0                  unexs_a[r_new] = unex_a
   144                                                           # Total unexpectedness
   145     11431    2216000.0    193.9      0.0                  unex = unex_g + unex_a
   146                                                           #unexs[r_new] = unex
   147     11431   19422000.0   1699.1      0.0                  print(f'  U(G): {unex_g}')
   148     11431   11352000.0    993.1      0.0                  print(f'  U(A): {unex_a}')
   149     11431   10845000.0    948.7      0.0                  print(f'  U: {unex}')
   150     11431   36031000.0   3152.0      0.0                  print(f'unexs: {unexs} r_new: {r_new} - r: {r} - ptr: {ptr}')
   151                                                           # ------------------------------------------------------------------------------------------------------------
   152                                                           
   153                                                           #if set(extents[r_new]) == set(extents[r]):
   154      6615    2509000.0    379.3      0.0                  if len_new_extent - len(extents[r]) == 0:
   155      6615   11833000.0   1788.8      0.0                      print(f' == comparing unex={unex} and unexs[{ptr}]={unexs[ptr]}')
   156                                                               
   157                                                               #if True:
   158      5765    2171000.0    376.6      0.0                      if unex - unexs[ptr] >= delta:
   159                                                               
   160      5765    7897000.0   1369.8      0.0                          print(f'  Extent size did not change -> attribute {names_col[j]} is added to intent.')
   161      5765    1724000.0    299.0      0.0                          intents[r] = new_intent
   162      5765    1630000.0    282.7      0.0                          unexs[-1] = unex
   163                                                               else:
   164       850   13287000.0  15631.8      0.0                          print(f'STOP rec, unexpectedness difference is {unex - unexs[ptr]}')
   165       850    1373000.0   1615.3      0.0                          print(f'Attribute {names_col[j]} ({j}) does not add any unexpectedness to pattern')
   166                                                                   #extents[r_new].pop(-1) -> no need to change the extent since we are in the block where it did not move by adding attribute
   167                                                                   #intents[r_new].pop(-1) -> at this stage, we only use new-intent, so no need to remove anything from intents parameter
   168                                                                   #raise Exception('end')
   169       850   30531000.0  35918.8      0.0                          break
   170                                                               
   171                                                           else:
   172      4816 181701626000.0 37728742.9     65.1                      is_canno = is_cannonical(context, extents, intents, r, j - 1)
   173      2976     635000.0    213.4      0.0                      if is_canno:
   174      1840   24573000.0  13354.9      0.0                          print(f'extents {extents[r]} intents {intents[r]} r {r} rnew {r_new}')
   175      1840    2943000.0   1599.5      0.0                          print(f'  Extent size DID change. IsCannonical: {is_canno}')
   176      1840     271000.0    147.3      0.0                          try:
   177      1726    1573000.0    911.4      0.0                              intents[r_new] = []
   178      1726     671000.0    388.8      0.0                          except IndexError:
   179      1726    1007000.0    583.4      0.0                              intents.append([])
   180                                           
   181                                                                   #intents[r_new] = new_intent 
   182                                                                   #len_new_intent = len(intents[r_new])
   183                                           
   184      1840    1364000.0    741.3      0.0                          print(f'r:{r} rnew:{r_new}')
   185      1840    7188000.0   3906.5      0.0                          print(f' ISCANNO comparing unex={unex} and unexs[{ptr}]=={unexs[ptr]}')
   186                                                                   
   187                                                                   #if True:
   188      1726    1213000.0    702.8      0.0                          if unex - unexs[ptr] >= delta or r == 0:
   189                                                                       
   190      1726     510000.0    295.5      0.0                              intents[r_new] = new_intent 
   191      1726     569000.0    329.7      0.0                              len_new_intent = len(intents[r_new])
   192                                           
   193      1726     445000.0    257.8      0.0                              unexs.append(unex)
   194      1726     792000.0    458.9      0.0                              ptr += 1
   195      1726   88284000.0  51149.5      0.0                              print(f'  --> Enter recursion with Intent: {names_col[intents[r_new]]}...')
   196                                           
   197                                                                       # New: if recursion depth is above a threshold, reorder attributes (randomly) to break the redundancy in patterns
   198      1726    8042000.0   4659.3      0.0                              p = smoothing(len(unexs))
   199      1726  757612000.0 438940.9      0.3                              X = stats.bernoulli(p)
   200                                           
   201                                                                       #if False:
   202      1637   95186000.0  58146.6      0.0                              if not shuf and X.rvs(1)[0] == 1:
   203        89     364000.0   4089.9      0.0                                  print(f'Entering smoothing, val={smoothing(len(unexs))}')
   204        89      27000.0    303.4      0.0                                  start = j+1
   205        89      18000.0    202.2      0.0                                  end = len(names_col)
   206        89    2440000.0  27415.7      0.0                                  rand_idxs = np.random.choice(np.arange(start, end), size=(end - start), replace=False)
   207        89      42000.0    471.9      0.0                                  if len(rand_idxs) > 0:
   208        89 12833624000.0 144198022.5      4.6                                      context = shuffle_columns(context, rand_idxs)
   209        89  117165000.0 1316460.7      0.0                                      context_csc = context.tocsc()
   210        89    9105000.0 102303.4      0.0                                      new_names_col = shuffle_columns(names_col, rand_idxs)
   211        89     387000.0   4348.3      0.0                                      print(start, end)
   212        89   32926000.0 369955.1      0.0                                      print(len(rand_idxs), rand_idxs, j)
   213        89    5090000.0  57191.0      0.0                                      print(new_names_col[j-1:j+5], names_col[j-1:j+5])
   214        89    1177000.0  13224.7      0.0                                      degs = shuffle_columns(degs, rand_idxs)
   215        89     249000.0   2797.8      0.0                                      print(f"Next attr will be: {new_names_col[j+1]} instead of {names_col[j+1]}")
   216        89    3906000.0  43887.6      0.0                                      print(f'degs: {degs[j-2:j+10]}')
   217        89      14000.0    157.3      0.0                                      names_col = new_names_col
   218        89      20000.0    224.7      0.0                                      shuf = True
   219      1562     334000.0    213.8      0.0                              elif shuf:
   220        75      47000.0    626.7      0.0                                  print(f'no smoothing, Reorder attributes according to degrees')
   221        75  760378000.0 10138373.3      0.3                                  sort_index = np.argsort(get_degrees(context.astype(bool), transpose=True))
   222        75     562000.0   7493.3      0.0                                  new_degs = degs[sort_index]
   223        75   93064000.0 1240853.3      0.0                                  new_context = context[:, sort_index]
   224        75    6233000.0  83106.7      0.0                                  new_names_col = names_col[sort_index]
   225        75  106337000.0 1417826.7      0.0                                  context_csc = new_context.tocsc()
   226        75     224000.0   2986.7      0.0                                  degs = new_degs.copy()
   227        75   35973000.0 479640.0      0.0                                  context = new_context.copy()
   228        75    9005000.0 120066.7      0.0                                  names_col = new_names_col.copy()
   229        75    6096000.0  81280.0      0.0                                  print(f'degs: {degs[j-2:j+5]}')
   230        75      13000.0    173.3      0.0                                  shuf = False
   231                                           
   232      1726    1495000.0    866.2      0.0                              unex_patterns(adjacency, context, context_csc, extents, intents, r=r_new, y=j+1, min_support=min_support, 
   233      1726     528000.0    305.9      0.0                                          max_support=max_support, beta=beta, delta=delta, degs=degs, unexs_g=unexs_g, 
   234      1726     422000.0    244.5      0.0                                          unexs_a=unexs_a, unexs=unexs, names_col=names_col, comp_gen_graph=comp_gen_graph, shuf=shuf)
   235                                                                   else:
   236       114      70000.0    614.0      0.0                              print(f'IsCANNO but no U improvement')
   237       114    1530000.0  13421.1      0.0                              break
   238                                                               
   239                                                               else:
   240      2976    2549000.0    856.5      0.0                          print(f'IsCannonical: False --> do not enter recursion.')
   241                                                               
   242                                               #print(f'inexs: {unexs}')        
   243      1727    1839000.0   1064.9      0.0      print(f'r:{r} - r_new:{r_new}')
   244      1727    1008000.0    583.7      0.0      unexs.pop(-1)
   245      1727     663000.0    383.9      0.0      ptr -= 1
   246      1727     276000.0    159.8      0.0      shuf = False
   247                                               #print(f'inexs after pop: {unexs}')        
   248      1727     749000.0    433.7      0.0      print(f'**END FUNCTION')
   249                                               
   250      1727   50176000.0  29053.9      0.0      return [*zip(extents, intents)]

