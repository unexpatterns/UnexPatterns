Timer unit: 1e-09 s

Total time: 141.473 s
File: /Users/simondelarue/Documents/PhD/Research/Co-Meg/CoMEG/algorithm.py
Function: unex_patterns at line 62

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    62                                           def unex_patterns(adjacency, context, context_csc, extents, intents, r=0, y=0, min_support=0, max_support=np.inf, beta=0, 
    63                                                       delta=0, degs=[], unexs_g=[], unexs_a=[], unexs=[], names_col=[], comp_gen_graph=None, shuf=False) -> List:
    64                                               """InClose algorithm using Unexpectedness + IsCannonical function. 
    65                                               
    66                                               Parameters
    67                                               ----------
    68                                               adjacency: sparse.csr_matrix
    69                                                   Adjacency matrix of the graph
    70                                               context: sparse.csr_matrix
    71                                                   Features matrix of the graph. Contains nodes x attributes.
    72                                               context_csc: sparse.csc_matrix
    73                                                   Features matrix of the graph in CSC format.
    74                                               extents: list
    75                                                   List of extents, i.e sets of nodes.
    76                                               intents: list
    77                                                   List of intents, i.e sets of attributes.
    78                                               r: int (default=0)
    79                                                   Index of the pattern being filled.
    80                                               y: int (default=0)
    81                                                   Index of candidate attribute.
    82                                               min_support: int (default=0)
    83                                                   Minimum support value for extent.
    84                                               max_support: int (default +inf)
    85                                                   Maximum support value for extent.
    86                                               beta: int (default=0)
    87                                                   Minimum support value for intent.
    88                                               delta: int (default=0)
    89                                                   Minimum value for Unexpectedness difference between patterns.
    90                                               degs, unexs_g, unexs_a, unexs, names_col: list
    91                                                   Lists for value storage over recursion.
    92                                               comp_gen_graph: dict (default=None)
    93                                                   Dictionnary with number of nodes as keys and list of graph generation complexities as values.
    94                                                   
    95                                               Returns
    96                                               -------
    97                                                   List of tuples where each tuple is an unexpected pattern made of (extent, intent). 
    98                                               """
    99                                               global r_new
   100                                               global ptr
   101       391     131000.0    335.0      0.0      r_new = r_new + 1
   102                                               
   103       391     240000.0    613.8      0.0      print(f'NEW ITERATION \n --------')
   104       391     349000.0    892.6      0.0      print(f'r: {r} - r_new: {r_new}')
   105                                               # ------------------------------------------------
   106       391   14744000.0  37708.4      0.0      print(f'|extents[r]|: {len(extents[r])} - intents[r]: {names_col[intents[r]]}')
   107                                               
   108   1345959  375765000.0    279.2      0.3      for j in np.arange(context.shape[1])[y:]:
   109   1345959 1576956000.0   1171.6      1.1          print(f"new attribute: {j} - {names_col[j]}")
   110   1345959  167049000.0    124.1      0.1          try:
   111   1345568  201939000.0    150.1      0.1              extents[r_new] = []
   112   1345568  209276000.0    155.5      0.1              unexs_g[r_new] = 0
   113   1345568  200890000.0    149.3      0.1              unexs_a[r_new] = 0
   114       391     111000.0    283.9      0.0          except IndexError:
   115       391     124000.0    317.1      0.0              extents.append([])
   116       391      95000.0    243.0      0.0              unexs_g.append(0)
   117       391     115000.0    294.1      0.0              unexs_a.append(0)
   118                                           
   119                                                   # Form a new extent by adding extension of attribute j to current pattern extent
   120   1345959 61899221000.0  45988.9     43.8          ext_j = set(extension([j], context_csc))
   121                                                   #ext_j = set(extension([j], context))
   122   1345959 5828989000.0   4330.7      4.1          extents[r_new] = list(sorted(set(extents[r]).intersection(ext_j)))
   123   1345959  245197000.0    182.2      0.2          len_new_extent = len(extents[r_new])
   124                                                   
   125   1329941  187162000.0    140.7      0.1          if (len_new_extent >= min_support) and (len_new_extent <= max_support):
   126                                           
   127                                                       # Verify that length of intention of new extent is greater than a threshold (e.g beta)
   128                                                       # In other words, we only enter the loop if the new extent still has "space" to welcome enough new attributes
   129                                                       # Using this, we can trim all patterns with not enough attributes from the recursion tree
   130     16018 5881499000.0 367180.6      4.2              size_intention = len(intention(extents[r_new], context))
   131     14400    2584000.0    179.4      0.0              if size_intention >= beta: 
   132                                                               
   133      1618    3453000.0   2134.1      0.0                  new_intent = list(sorted(set(intents[r]).union(set([j]))))
   134                                                           
   135                                                           # Compute Unexpectedness on pattern (i.e on graph and attributes)
   136                                                           # ------------------------------------------------------------------------------------------------------------
   137      1618    6780000.0   4190.4      0.0                  print(f'  Extent size {len(extents[r_new])} - intent {new_intent}')
   138      1618     330000.0    204.0      0.0                  size = len(new_intent)
   139      1618  764612000.0 472566.1      0.5                  unex_g = graph_unexpectedness(adjacency[extents[r_new], :][:, extents[r_new]], comp_gen_graph)
   140      1618     530000.0    327.6      0.0                  unexs_g[r_new] = unex_g
   141                                                           # Attributes unexpectedness
   142      1618   16603000.0  10261.4      0.0                  unex_a = attr_unexpectedness(context, new_intent, degs)
   143      1618     350000.0    216.3      0.0                  unexs_a[r_new] = unex_a
   144                                                           # Total unexpectedness
   145      1618     327000.0    202.1      0.0                  unex = unex_g + unex_a
   146                                                           #unexs[r_new] = unex
   147      1618    3486000.0   2154.5      0.0                  print(f'  U(G): {unex_g}')
   148      1618    1688000.0   1043.3      0.0                  print(f'  U(A): {unex_a}')
   149      1618    1480000.0    914.7      0.0                  print(f'  U: {unex}')
   150      1618    5103000.0   3153.9      0.0                  print(f'unexs: {unexs} r_new: {r_new} - r: {r} - ptr: {ptr}')
   151                                                           # ------------------------------------------------------------------------------------------------------------
   152                                                           
   153                                                           #if set(extents[r_new]) == set(extents[r]):
   154       982     443000.0    451.1      0.0                  if len_new_extent - len(extents[r]) == 0:
   155       982    1985000.0   2021.4      0.0                      print(f' == comparing unex={unex} and unexs[{ptr}]={unexs[ptr]}')
   156                                                               
   157                                                               #if True:
   158       982     413000.0    420.6      0.0                      if unex - unexs[ptr] >= delta:
   159                                                               
   160       982    1343000.0   1367.6      0.0                          print(f'  Extent size did not change -> attribute {names_col[j]} is added to intent.')
   161       982     296000.0    301.4      0.0                          intents[r] = new_intent
   162       982     294000.0    299.4      0.0                          unexs[-1] = unex
   163                                                               else:
   164                                                                   print(f'STOP rec, unexpectedness difference is {unex - unexs[ptr]}')
   165                                                                   print(f'Attribute {names_col[j]} ({j}) does not add any unexpectedness to pattern')
   166                                                                   #extents[r_new].pop(-1) -> no need to change the extent since we are in the block where it did not move by adding attribute
   167                                                                   #intents[r_new].pop(-1) -> at this stage, we only use new-intent, so no need to remove anything from intents parameter
   168                                                                   #raise Exception('end')
   169                                                                   break
   170                                                               
   171                                                           else:
   172       636 56905411000.0 89473916.7     40.2                      is_canno = is_cannonical(context, extents, intents, r, j - 1)
   173       430     123000.0    286.0      0.0                      if is_canno:
   174       430   11924000.0  27730.2      0.0                          print(f'extents {extents[r]} intents {intents[r]} r {r} rnew {r_new}')
   175       430     689000.0   1602.3      0.0                          print(f'  Extent size DID change. IsCannonical: {is_canno}')
   176       430      73000.0    169.8      0.0                          try:
   177       390     369000.0    946.2      0.0                              intents[r_new] = []
   178       390     167000.0    428.2      0.0                          except IndexError:
   179       390     244000.0    625.6      0.0                              intents.append([])
   180                                           
   181                                                                   #intents[r_new] = new_intent 
   182                                                                   #len_new_intent = len(intents[r_new])
   183                                           
   184       430     359000.0    834.9      0.0                          print(f'r:{r} rnew:{r_new}')
   185       430    1753000.0   4076.7      0.0                          print(f' ISCANNO comparing unex={unex} and unexs[{ptr}]=={unexs[ptr]}')
   186                                                                   
   187                                                                   #if True:
   188       390     262000.0    671.8      0.0                          if unex - unexs[ptr] >= delta or r == 0:
   189                                                                       
   190       390      96000.0    246.2      0.0                              intents[r_new] = new_intent 
   191       390      79000.0    202.6      0.0                              len_new_intent = len(intents[r_new])
   192                                           
   193       390     127000.0    325.6      0.0                              unexs.append(unex)
   194       390     171000.0    438.5      0.0                              ptr += 1
   195       390   20169000.0  51715.4      0.0                              print(f'  --> Enter recursion with Intent: {names_col[intents[r_new]]}...')
   196                                           
   197                                                                       # New: if recursion depth is above a threshold, reorder attributes (randomly) to break the redundancy in patterns
   198       390    2028000.0   5200.0      0.0                              p = smoothing(len(unexs))
   199       390  179152000.0 459364.1      0.1                              X = stats.bernoulli(p)
   200                                           
   201                                                                       #if False:
   202       385   23532000.0  61122.1      0.0                              if not shuf and X.rvs(1)[0] == 1:
   203         5      19000.0   3800.0      0.0                                  print(f'Entering smoothing, val={smoothing(len(unexs))}')
   204         5          0.0      0.0      0.0                                  start = j+1
   205         5       4000.0    800.0      0.0                                  end = len(names_col)
   206         5     285000.0  57000.0      0.0                                  rand_idxs = np.random.choice(np.arange(start, end), size=(end - start), replace=False)
   207         5          0.0      0.0      0.0                                  if len(rand_idxs) > 0:
   208         5 6545725000.0 1309145000.0      4.6                                      context = shuffle_columns(context, rand_idxs)
   209         5   15007000.0 3001400.0      0.0                                      context_csc = context.tocsc()
   210         5    1182000.0 236400.0      0.0                                      new_names_col = shuffle_columns(names_col, rand_idxs)
   211         5      32000.0   6400.0      0.0                                      print(start, end)
   212         5    4360000.0 872000.0      0.0                                      print(len(rand_idxs), rand_idxs, j)
   213         5     313000.0  62600.0      0.0                                      print(new_names_col[j-1:j+5], names_col[j-1:j+5])
   214         5     109000.0  21800.0      0.0                                      degs = shuffle_columns(degs, rand_idxs)
   215         5      14000.0   2800.0      0.0                                      print(f"Next attr will be: {new_names_col[j+1]} instead of {names_col[j+1]}")
   216         5     292000.0  58400.0      0.0                                      print(f'degs: {degs[j-2:j+10]}')
   217         5          0.0      0.0      0.0                                      names_col = new_names_col
   218         5       1000.0    200.0      0.0                                      shuf = True
   219       379      78000.0    205.8      0.0                              elif shuf:
   220         6       5000.0    833.3      0.0                                  print(f'no smoothing, Reorder attributes according to degrees')
   221         6  105077000.0 17512833.3      0.1                                  sort_index = np.argsort(get_degrees(context.astype(bool), transpose=True))
   222         6      80000.0  13333.3      0.0                                  new_degs = degs[sort_index]
   223         6   15105000.0 2517500.0      0.0                                  new_context = context[:, sort_index]
   224         6    1188000.0 198000.0      0.0                                  new_names_col = names_col[sort_index]
   225         6   20241000.0 3373500.0      0.0                                  context_csc = new_context.tocsc()
   226         6      65000.0  10833.3      0.0                                  degs = new_degs.copy()
   227         6    7154000.0 1192333.3      0.0                                  context = new_context.copy()
   228         6    1084000.0 180666.7      0.0                                  names_col = new_names_col.copy()
   229         6     524000.0  87333.3      0.0                                  print(f'degs: {degs[j-2:j+5]}')
   230         6       1000.0    166.7      0.0                                  shuf = False
   231                                           
   232       390     359000.0    920.5      0.0                              unex_patterns(adjacency, context, context_csc, extents, intents, r=r_new, y=j+1, min_support=min_support, 
   233       390     116000.0    297.4      0.0                                          max_support=max_support, beta=beta, delta=delta, degs=degs, unexs_g=unexs_g, 
   234       390      89000.0    228.2      0.0                                          unexs_a=unexs_a, unexs=unexs, names_col=names_col, comp_gen_graph=comp_gen_graph, shuf=shuf)
   235                                                                   else:
   236        40      72000.0   1800.0      0.0                              print(f'IsCANNO but no U improvement')
   237        40     736000.0  18400.0      0.0                              break
   238                                                               
   239                                                               else:
   240       206     233000.0   1131.1      0.0                          print(f'IsCannonical: False --> do not enter recursion.')
   241                                                               
   242                                               #print(f'inexs: {unexs}')        
   243       391     385000.0    984.7      0.0      print(f'r:{r} - r_new:{r_new}')
   244       391     285000.0    728.9      0.0      unexs.pop(-1)
   245       391     162000.0    414.3      0.0      ptr -= 1
   246       391      80000.0    204.6      0.0      shuf = False
   247                                               #print(f'inexs after pop: {unexs}')        
   248       391     149000.0    381.1      0.0      print(f'**END FUNCTION')
   249                                               
   250       391    3835000.0   9808.2      0.0      return [*zip(extents, intents)]

